{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Source Code: github.com/pbdtools/xfds Documentation: xfds.pbd.tools Do you have FDS installed on your machine? Do you know where the FDS executable is located? Do you know what version it is? Maybe you have multiple versions of FDS on your machine, but do you know which one do you use? Perhaps you generate a large number of spreadsheets to help you generate fire models. Are you tired of copying and pasting data all over the place? Do you spend a lot of time debugging your FDS code because that fire is just a bit off it's mark? \ud83e\udd2f Designed to save you time, xFDS is meant to help generate and manage your fire models. Sound too good to be true? Learn more at xfds.pbd.tools ! \ud83e\udd13 Not quite convinced it's worth it? Watch the presentation from FEMTC 2022 or let us tell you more... Features \u00b6 Generate Parametric Analyses \u00b6 Fire models can often require mesh sensitivity studies, different fire sizes, adjusting exhaust rates, or messing with a number of differnt parameters. With the power of the Jinja templating system, xFDS can help generate and fine tune a variety of models from a single .fds file! Specify Resolution, not IJK \u00b6 Let xFDS calculate the number of cells so you don't have to. By setting variables in your FDS file or configuration file , you can use them to perform calculations. Anything between double curly braces {{ and }} is evaluated as Python code. Meet your new input file. { % set xmax , ymax , zmax = 5 , 4 , 3 % } { % set res = 0.2 % } & MESH XB = 0 , {{ xmax }}, 0 , {{ ymax }}, 0 , {{ zmax }}, IJK = {{ xmax // res }}, {{ ymax // res }}, {{ zmax // res }} / Will translate to: A nicely formatted &MESH line! & MESH XB = 0 , 5 , 0 , 4 , 0 , 3 , IJK = 25 , 20 , 15 / Want to run a finer mesh? Just change res to 0.1 and get One mighty fine &MESH! & MESH XB = 0 , 5 , 0 , 4 , 0 , 3 , IJK = 50 , 40 , 30 / Feel like that template is a bit verbose? xFDS has some convience template filters to make your life easier. Filters make your code easier to read. { % set bounds = 0 , 5 , 0 , 4 , 0 , 3 % } & MESH XB = {{ bounds | xb }}, IJK = {{ bounds | ijk ( res ) }} Don't think, KNOW your HRRPUA is correct \u00b6 It can be tricky to tell if the Heat Release Rate Per Unit Area (HRRPUA) parameter is correct. Are you sure the area used for the burner will give you the correct heat release rate (HRR)? With xFDS, you can define your HRR and Area then let xFDS do the calculations for you! \ud83d\ude80 Let xFDS do the hard part { % set hrr = 1000 % } { % set area = 1.5 % } { % set offset = ( area ** 0.5 ) / 2 % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & VENT XB = {{ ( - offset , offset , - offset , offset , 0.0 , 0.0 ) | xb }}, SURF_ID = 'BURNER' / Go ahead and try out this burner and see if xFDS got it right. \ud83d\ude09 We added a few lines to help you out & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 60 , 60 , 60 / & TIME T_END = 10 / & REAC FUEL = 'PROPANE' / --- & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & VENT XB = - 0.612 , 0.612 , - 0.612 , 0.612 , 0.000 , 0.000 , SURF_ID = 'BURNER' / --- & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / Use loops to create an array of devices \u00b6 Tired of generating a bunch of items? Use for loops to get it done faster! Here, xFDS creates 8 thermocouples evenly spaced between 1 ft and 8 ft. Yep, you can specify things in whatever unit you want thanks to the convert filter You'll be doing loops around your competition! { % set n_thcps , bottom , top = 8 , 1 | convert ( 'ft' , 'm' ), 8 | convert ( 'ft' , 'm' ) % } { % for z in n_thcps | linspace ( bottom , top ) % } & DEVC ID = \"THCP_{{ loop.index }}\" QUANTITY = 'THERMOCOUPLE' , XYZ = {{ ( 0 , 0 , z ) | xyz }} / { % endfor % } Will render to the following code. Look at that number for & DEVC ID = \"THCP_1\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.305 / & DEVC ID = \"THCP_2\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.610 / & DEVC ID = \"THCP_3\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.914 / & DEVC ID = \"THCP_4\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.219 / & DEVC ID = \"THCP_5\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.524 / & DEVC ID = \"THCP_6\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.829 / & DEVC ID = \"THCP_7\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 2.134 / & DEVC ID = \"THCP_8\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 2.438 / Manage FDS Runs \u00b6 Auto-detect FDS file in directory \u00b6 If you're in a directory containing an FDS file, xFDS will find the FDS file without you specifying it. All you need to do is say xfds run ! Latest version of FDS always available. \u00b6 xFDS will always default to the latest version thanks to how the Docker images are created. You can always use an older version of FDS if needed and xFDS makes it easy to work with any version of FDS you need. Always know what FDS version you're using. \u00b6 xFDS will inject the FDS version into the Docker container name so there's no question what version of FDS is running. Runs in Background \u00b6 Fire and forget. xFDS will run your model in a Docker container and free up your terminal for you to keep working.","title":"Home"},{"location":"#features","text":"","title":"Features"},{"location":"#generate-parametric-analyses","text":"Fire models can often require mesh sensitivity studies, different fire sizes, adjusting exhaust rates, or messing with a number of differnt parameters. With the power of the Jinja templating system, xFDS can help generate and fine tune a variety of models from a single .fds file!","title":"Generate Parametric Analyses"},{"location":"#specify-resolution-not-ijk","text":"Let xFDS calculate the number of cells so you don't have to. By setting variables in your FDS file or configuration file , you can use them to perform calculations. Anything between double curly braces {{ and }} is evaluated as Python code. Meet your new input file. { % set xmax , ymax , zmax = 5 , 4 , 3 % } { % set res = 0.2 % } & MESH XB = 0 , {{ xmax }}, 0 , {{ ymax }}, 0 , {{ zmax }}, IJK = {{ xmax // res }}, {{ ymax // res }}, {{ zmax // res }} / Will translate to: A nicely formatted &MESH line! & MESH XB = 0 , 5 , 0 , 4 , 0 , 3 , IJK = 25 , 20 , 15 / Want to run a finer mesh? Just change res to 0.1 and get One mighty fine &MESH! & MESH XB = 0 , 5 , 0 , 4 , 0 , 3 , IJK = 50 , 40 , 30 / Feel like that template is a bit verbose? xFDS has some convience template filters to make your life easier. Filters make your code easier to read. { % set bounds = 0 , 5 , 0 , 4 , 0 , 3 % } & MESH XB = {{ bounds | xb }}, IJK = {{ bounds | ijk ( res ) }}","title":"Specify Resolution, not IJK"},{"location":"#dont-think-know-your-hrrpua-is-correct","text":"It can be tricky to tell if the Heat Release Rate Per Unit Area (HRRPUA) parameter is correct. Are you sure the area used for the burner will give you the correct heat release rate (HRR)? With xFDS, you can define your HRR and Area then let xFDS do the calculations for you! \ud83d\ude80 Let xFDS do the hard part { % set hrr = 1000 % } { % set area = 1.5 % } { % set offset = ( area ** 0.5 ) / 2 % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & VENT XB = {{ ( - offset , offset , - offset , offset , 0.0 , 0.0 ) | xb }}, SURF_ID = 'BURNER' / Go ahead and try out this burner and see if xFDS got it right. \ud83d\ude09 We added a few lines to help you out & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 60 , 60 , 60 / & TIME T_END = 10 / & REAC FUEL = 'PROPANE' / --- & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & VENT XB = - 0.612 , 0.612 , - 0.612 , 0.612 , 0.000 , 0.000 , SURF_ID = 'BURNER' / --- & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' /","title":"Don't think, KNOW your HRRPUA is correct"},{"location":"#use-loops-to-create-an-array-of-devices","text":"Tired of generating a bunch of items? Use for loops to get it done faster! Here, xFDS creates 8 thermocouples evenly spaced between 1 ft and 8 ft. Yep, you can specify things in whatever unit you want thanks to the convert filter You'll be doing loops around your competition! { % set n_thcps , bottom , top = 8 , 1 | convert ( 'ft' , 'm' ), 8 | convert ( 'ft' , 'm' ) % } { % for z in n_thcps | linspace ( bottom , top ) % } & DEVC ID = \"THCP_{{ loop.index }}\" QUANTITY = 'THERMOCOUPLE' , XYZ = {{ ( 0 , 0 , z ) | xyz }} / { % endfor % } Will render to the following code. Look at that number for & DEVC ID = \"THCP_1\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.305 / & DEVC ID = \"THCP_2\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.610 / & DEVC ID = \"THCP_3\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 0.914 / & DEVC ID = \"THCP_4\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.219 / & DEVC ID = \"THCP_5\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.524 / & DEVC ID = \"THCP_6\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 1.829 / & DEVC ID = \"THCP_7\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 2.134 / & DEVC ID = \"THCP_8\" QUANTITY = 'THERMOCOUPLE' , XYZ = 0.000 , 0.000 , 2.438 /","title":"Use loops to create an array of devices"},{"location":"#manage-fds-runs","text":"","title":"Manage FDS Runs"},{"location":"#auto-detect-fds-file-in-directory","text":"If you're in a directory containing an FDS file, xFDS will find the FDS file without you specifying it. All you need to do is say xfds run !","title":"Auto-detect FDS file in directory"},{"location":"#latest-version-of-fds-always-available","text":"xFDS will always default to the latest version thanks to how the Docker images are created. You can always use an older version of FDS if needed and xFDS makes it easy to work with any version of FDS you need.","title":"Latest version of FDS always available."},{"location":"#always-know-what-fds-version-youre-using","text":"xFDS will inject the FDS version into the Docker container name so there's no question what version of FDS is running.","title":"Always know what FDS version you're using."},{"location":"#runs-in-background","text":"Fire and forget. xFDS will run your model in a Docker container and free up your terminal for you to keep working.","title":"Runs in Background"},{"location":"installation/","text":"Installation \u00b6 Install xFDS \u00b6 Once you have Python and pipx installed on your machine (see below), you can install xFDS with the following command. Install xFDS $ pipx install xfds You can verify that xfds is working by displaying the help text. If this does not work, try troubleshooting pipx Print Help $ xfds --help Required Third Party Packages \u00b6 Python \u00b6 Info Installing Python Python is a high-level general-purpose programming language. If you don't have Python installed on your machine, it is recommended that you get the latest stable version of the Python interpreter. Real Python has a nice article to help you get Python on your machine. Warning If you're installing xFDS on Ubuntu, Python may already be installed, but you will have to install pip and venv . pip is needed to install packages such as pipx and venv is required so pipx can install xFDS in an isolated environment. Install pip and venv sudo apt install python3-pip python3-venv How does xFDS use Python? xFDS is written in Python! You will need a Python interpreter for xFDS to run. pipx \u00b6 Info Installing pipx pipx allows you to install python applications in isolated envrionments. To install pipx, check out their installation instructions How does xFDS use pipx? While you could use pip to install xFDS, it could interfere with the Python version your machine uses to function. pipx is the recommended way to install xFDS on your machine. Docker \u00b6 Info If you are installing this on a server install Docker Engine . Otherwise, to get the desktop client, install Docker Desktop (includes Docker Engine). Docker is a platform used to develop and deliver software in packages called containers. These containers are lightweight computing environment that use the host computer's resources, while isolating the running container from the host machine. Docker can be installed on most modern computers. For instructions on how to setup Docker, visit their getting started page. How does xFDS use Docker? The generous folks at BCL have developed a series of Docker images for a variety of FDS versions. The images are maintained under a MIT License on Github and available for use on dockerhub . To run a multi-core model in a docker image, the user would have to enter the following command into their terminal: Docker Run Command docker run --rm -v $(pwd):/workdir openbcl/fds mpiexec -n 2 fds casename.fds The xFDS run command simplifies this command and will automatically locate the FDS input file in the current directory with the following command: xFDS Run Command xfds run -n 2 If you don't intend to use the run command for running tests locally, you can skip this step. What's the difference between pipx and Docker? Docker will isolate the container from the rest of the host machine and does not have access to the host machine unless specified. With xFDS, the docker containers only have access to read and write from the specified directory, but cannot interface with the host machines systems and services. In contrast, pipx isolates the dependencies for xFDS from other Python projects on the host machine. It makes xFDS available on the command line anywhere on the host machine.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#install-xfds","text":"Once you have Python and pipx installed on your machine (see below), you can install xFDS with the following command. Install xFDS $ pipx install xfds You can verify that xfds is working by displaying the help text. If this does not work, try troubleshooting pipx Print Help $ xfds --help","title":"Install xFDS"},{"location":"installation/#required-third-party-packages","text":"","title":"Required Third Party Packages"},{"location":"installation/#python","text":"Info Installing Python Python is a high-level general-purpose programming language. If you don't have Python installed on your machine, it is recommended that you get the latest stable version of the Python interpreter. Real Python has a nice article to help you get Python on your machine. Warning If you're installing xFDS on Ubuntu, Python may already be installed, but you will have to install pip and venv . pip is needed to install packages such as pipx and venv is required so pipx can install xFDS in an isolated environment. Install pip and venv sudo apt install python3-pip python3-venv How does xFDS use Python? xFDS is written in Python! You will need a Python interpreter for xFDS to run.","title":"Python"},{"location":"installation/#pipx","text":"Info Installing pipx pipx allows you to install python applications in isolated envrionments. To install pipx, check out their installation instructions How does xFDS use pipx? While you could use pip to install xFDS, it could interfere with the Python version your machine uses to function. pipx is the recommended way to install xFDS on your machine.","title":"pipx"},{"location":"installation/#docker","text":"Info If you are installing this on a server install Docker Engine . Otherwise, to get the desktop client, install Docker Desktop (includes Docker Engine). Docker is a platform used to develop and deliver software in packages called containers. These containers are lightweight computing environment that use the host computer's resources, while isolating the running container from the host machine. Docker can be installed on most modern computers. For instructions on how to setup Docker, visit their getting started page. How does xFDS use Docker? The generous folks at BCL have developed a series of Docker images for a variety of FDS versions. The images are maintained under a MIT License on Github and available for use on dockerhub . To run a multi-core model in a docker image, the user would have to enter the following command into their terminal: Docker Run Command docker run --rm -v $(pwd):/workdir openbcl/fds mpiexec -n 2 fds casename.fds The xFDS run command simplifies this command and will automatically locate the FDS input file in the current directory with the following command: xFDS Run Command xfds run -n 2 If you don't intend to use the run command for running tests locally, you can skip this step. What's the difference between pipx and Docker? Docker will isolate the container from the rest of the host machine and does not have access to the host machine unless specified. With xFDS, the docker containers only have access to read and write from the specified directory, but cannot interface with the host machines systems and services. In contrast, pipx isolates the dependencies for xFDS from other Python projects on the host machine. It makes xFDS available on the command line anywhere on the host machine.","title":"Docker"},{"location":"license/","text":"xFDS is licensed under the MIT License . Copyright 2021 PBD Tools LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"commands/render/","text":"Render Command \u00b6 Usage \u00b6 xfds render --help Usage: xfds render [OPTIONS] [DIRECTORY] COMMAND [ARGS]... Render an FDS template file into scenarios. Arguments: [DIRECTORY] Directory containing pbd.yml configuration file. [default: .] Options: --help Show this message and exit. Developed by pbd.tools Description \u00b6 The xFDS render command converts template input files into usable modeling files. From a given directory (or the current directory if not specified), xFDS will traverse up the file system until it finds a pbd.yml configuration file . It then parses the contents of the configuration file and generates a model for each set of parameters . Each input file specified in the configuration file will be treated like a template . The templates will be processed with the data specified in the configuration file and placed in an output directory. For example, the configuration file below expects two files to be located in the same directory as the configuration file: model.fds and model.pbs . It recognizes that a single parameter is set. examples/pbs/pbd.yml 1 2 3 4 5 6 7 8 xfds : render : - name : using_ {{ n }} _nodes files : - model . fds - model . pbs parameters : n : [ 4 , 8 , 12 ] The two input files are defined in a way that uses the n parameter from the configuration file. The model.fds template is a simple file that just creates n meshes placed next to each other in the x-direction. Meahwhile, the model.pbs template is a partial PBS file showing how the nodes specifications can be altered based on the n umber of processors required (assuming 1 processor per mesh). examples/pbs/model.fds 1 2 3 4 { % for ix in range ( n ) % } { % set xb = ix , ix + 1 , 0 , 1 , 0 , 1 % } & MESH XB = {{ xb | xb }}, IJK = {{ xb | ijk ( 0.25 ) }} { % endfor % } examples/pbs/model.pbs 1 2 3 4 #PBS -l nodes= { %- if n | node ( ppn = 8 , mode = 'full' ) % }{{ n // 8 }}: node : ppn = 8 { % endif % } { %- if n | node ( ppn = 8 , mode = 'both' ) % }:{ % endif % } { %- if n | node ( ppn = 8 , mode = 'part' ) % } 1 : node : ppn = {{ n % 8 }}{ % endif % } xFDS will process each of the templates and place them in a directory ./output/using_{{n}}_nodes where {{n}} is replaced by the parameter n . Each model is placed in its own directory where the name matches the input files. Tip While xFDS will treat every specified file as a template, if there is no template syntax defined, the file will be copied over to the output directory and be given the same base name as the model file. This is useful for having consistent Smokeview scripts, Smokeview ini files, or other files for each model. Warning xFDS will use the name defined in the configuration file and match the file extension from the template file. This is how model.fds gets renamed to using_{{n}}_nodes.fds in the output. If you are using the &CATF feature in FDS, make sure the OTHER_FILES do not have an .fds file extension. Use a .txt or .data extension instead if you need to use this feature. You can have multiple .fds files in a project as long as they're specified as different models . Files in output/using_4_nodes : examples/pbs/output/using_4_nodes/using_4_nodes.fds 1 2 3 4 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_4_nodes/using_4_nodes.pbs 1 #PBS -l nodes=1:node:ppn=4 Files in output/using_8_nodes : examples/pbs/output/using_8_nodes/using_8_nodes.fds 1 2 3 4 5 6 7 8 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 4.000 , 5.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 5.000 , 6.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 6.000 , 7.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 7.000 , 8.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_8_nodes/using_8_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8 Files in output/using_12_nodes : examples/pbs/output/using_12_nodes/using_12_nodes.fds 1 2 3 4 5 6 7 8 9 10 11 12 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 4.000 , 5.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 5.000 , 6.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 6.000 , 7.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 7.000 , 8.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 8.000 , 9.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 9.000 , 10.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 10.000 , 11.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 11.000 , 12.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_12_nodes/using_12_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8:1:node:ppn=4","title":"xfds render"},{"location":"commands/render/#render-command","text":"","title":"Render Command"},{"location":"commands/render/#usage","text":"xfds render --help Usage: xfds render [OPTIONS] [DIRECTORY] COMMAND [ARGS]... Render an FDS template file into scenarios. Arguments: [DIRECTORY] Directory containing pbd.yml configuration file. [default: .] Options: --help Show this message and exit. Developed by pbd.tools","title":"Usage"},{"location":"commands/render/#description","text":"The xFDS render command converts template input files into usable modeling files. From a given directory (or the current directory if not specified), xFDS will traverse up the file system until it finds a pbd.yml configuration file . It then parses the contents of the configuration file and generates a model for each set of parameters . Each input file specified in the configuration file will be treated like a template . The templates will be processed with the data specified in the configuration file and placed in an output directory. For example, the configuration file below expects two files to be located in the same directory as the configuration file: model.fds and model.pbs . It recognizes that a single parameter is set. examples/pbs/pbd.yml 1 2 3 4 5 6 7 8 xfds : render : - name : using_ {{ n }} _nodes files : - model . fds - model . pbs parameters : n : [ 4 , 8 , 12 ] The two input files are defined in a way that uses the n parameter from the configuration file. The model.fds template is a simple file that just creates n meshes placed next to each other in the x-direction. Meahwhile, the model.pbs template is a partial PBS file showing how the nodes specifications can be altered based on the n umber of processors required (assuming 1 processor per mesh). examples/pbs/model.fds 1 2 3 4 { % for ix in range ( n ) % } { % set xb = ix , ix + 1 , 0 , 1 , 0 , 1 % } & MESH XB = {{ xb | xb }}, IJK = {{ xb | ijk ( 0.25 ) }} { % endfor % } examples/pbs/model.pbs 1 2 3 4 #PBS -l nodes= { %- if n | node ( ppn = 8 , mode = 'full' ) % }{{ n // 8 }}: node : ppn = 8 { % endif % } { %- if n | node ( ppn = 8 , mode = 'both' ) % }:{ % endif % } { %- if n | node ( ppn = 8 , mode = 'part' ) % } 1 : node : ppn = {{ n % 8 }}{ % endif % } xFDS will process each of the templates and place them in a directory ./output/using_{{n}}_nodes where {{n}} is replaced by the parameter n . Each model is placed in its own directory where the name matches the input files. Tip While xFDS will treat every specified file as a template, if there is no template syntax defined, the file will be copied over to the output directory and be given the same base name as the model file. This is useful for having consistent Smokeview scripts, Smokeview ini files, or other files for each model. Warning xFDS will use the name defined in the configuration file and match the file extension from the template file. This is how model.fds gets renamed to using_{{n}}_nodes.fds in the output. If you are using the &CATF feature in FDS, make sure the OTHER_FILES do not have an .fds file extension. Use a .txt or .data extension instead if you need to use this feature. You can have multiple .fds files in a project as long as they're specified as different models . Files in output/using_4_nodes : examples/pbs/output/using_4_nodes/using_4_nodes.fds 1 2 3 4 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_4_nodes/using_4_nodes.pbs 1 #PBS -l nodes=1:node:ppn=4 Files in output/using_8_nodes : examples/pbs/output/using_8_nodes/using_8_nodes.fds 1 2 3 4 5 6 7 8 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 4.000 , 5.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 5.000 , 6.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 6.000 , 7.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 7.000 , 8.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_8_nodes/using_8_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8 Files in output/using_12_nodes : examples/pbs/output/using_12_nodes/using_12_nodes.fds 1 2 3 4 5 6 7 8 9 10 11 12 & MESH XB = 0.000 , 1.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 1.000 , 2.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 2.000 , 3.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 3.000 , 4.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 4.000 , 5.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 5.000 , 6.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 6.000 , 7.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 7.000 , 8.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 8.000 , 9.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 9.000 , 10.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 10.000 , 11.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 & MESH XB = 11.000 , 12.000 , 0.000 , 1.000 , 0.000 , 1.000 , IJK = 4 , 4 , 4 examples/pbs/output/using_12_nodes/using_12_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8:1:node:ppn=4","title":"Description"},{"location":"commands/reset/","text":"Reset Command \u00b6 Usage \u00b6 xfds reset --help Usage: xfds reset [OPTIONS] [DIRECTORY] COMMAND [ARGS]... Reset a folder by clearing everything except specified files. Arguments: [DIRECTORY] Directory containing model files. [default: .] Options: --help Show this message and exit. Developed by pbd.tools Description \u00b6 The reset command will reset the fire model direcory so that it only contains the desired files, generally the input files. A few examples where this may be useful are as follows: Reset the directory so only the input files remain. This way, when a model is run again, there is a high level of confidence that every file in the directory correlates to the given model. Remove bulky output files. Depending on the analysis, it may not be necessary to keep the large binary files. After backing up the models to a server, disk space can be saved by deleting the files necessary for Smokeview. When processing models, there might be extra files generated, such as exporting images from Smokeview. A pattern could be used to ensure all the model outputs remain, but the extra files are removed. xFDS uses the glob syntax to denote which files to keep. See the config file for more information. tests/test_reset/model/pbd.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 xfds : render : - name : model_ {{ \" %.2f \" | format ( res ) }} files : - model . fds - model . pbs variables : fds : 6.7.7 n : 1 parameters : res : [ 0.10 , 0.15 ] reset : keep : - \"*.fds\" - \"*.pbs\"","title":"xfds reset"},{"location":"commands/reset/#reset-command","text":"","title":"Reset Command"},{"location":"commands/reset/#usage","text":"xfds reset --help Usage: xfds reset [OPTIONS] [DIRECTORY] COMMAND [ARGS]... Reset a folder by clearing everything except specified files. Arguments: [DIRECTORY] Directory containing model files. [default: .] Options: --help Show this message and exit. Developed by pbd.tools","title":"Usage"},{"location":"commands/reset/#description","text":"The reset command will reset the fire model direcory so that it only contains the desired files, generally the input files. A few examples where this may be useful are as follows: Reset the directory so only the input files remain. This way, when a model is run again, there is a high level of confidence that every file in the directory correlates to the given model. Remove bulky output files. Depending on the analysis, it may not be necessary to keep the large binary files. After backing up the models to a server, disk space can be saved by deleting the files necessary for Smokeview. When processing models, there might be extra files generated, such as exporting images from Smokeview. A pattern could be used to ensure all the model outputs remain, but the extra files are removed. xFDS uses the glob syntax to denote which files to keep. See the config file for more information. tests/test_reset/model/pbd.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 xfds : render : - name : model_ {{ \" %.2f \" | format ( res ) }} files : - model . fds - model . pbs variables : fds : 6.7.7 n : 1 parameters : res : [ 0.10 , 0.15 ] reset : keep : - \"*.fds\" - \"*.pbs\"","title":"Description"},{"location":"commands/run/","text":"Run Command \u00b6 Usage \u00b6 xfds run --help Usage: xfds run [OPTIONS] [FDS_FILE] COMMAND [ARGS]... Run an FDS in a Docker container. Arguments: [FDS_FILE] The FDS file or directory to run. If a **FDS file** is specified, the FDS model will run. If a **directory** is specified, xFDS will find the first FDS file in the directory and assume that is what it should run. If no fds file exists, xFDS will default to interactive mode. if **nothing** is specified, the current directory is used and the above rules are applied. [default: .] Options: -i, --interactive Launch Docke-r container in interactive mode (`docker run -it`). By default, the Docker image will run the FDS model, but interactive mode will put you into the container where you can start the FDS model manually. This is good for when you are rapidly iterating and don't want to wait for the Docker image load time. -n, --processors INTEGER RANGE Specify number of processors. If the number of processors is greater than 1, it will invoke MPI for you (`mpiexec -n #`). Ignored if interactive mode is enabled. [default: 1; x>=1] -v, --fds TEXT Specify FDS version to use. The FDS version can also be extracted from the file path or metadata in the FDS file. --help Show this message and exit. Developed by pbd.tools Description \u00b6 The xFDS run command is a convience wrapper for docker run. xFDS determines the appropriate arguments for the model and exectues the docker run command for you. Unless stated otherwise, the commands below assume you are at /home/pbdtools/models with the following directory structure. Directory Structure under /home/pbdtools/models/ /home/pbdtools/models $ tree . \u251c\u2500\u2500 multi_mesh # More than 1 processor required \u2502 \u2514\u2500\u2500 multi_mesh.fds \u2502 \u251c\u2500\u2500 multiple_files # Multiple fds files in directory \u2502 \u251c\u2500\u2500 model_01.fds \u2502 \u2514\u2500\u2500 model_02.fds \u2502 \u2514\u2500\u2500 single_mesh # Only 1 processor required \u2514\u2500\u2500 single_mesh.fds Working in Different Shells \u00b6 The xfds run command simplifies and unifies what you have to type into the terminal. The sytax for using FDS Dockerfiles without xFDS is sligntly different depending on what shell you're using. Each shell has it's own way of referring to the current directory. Linux / Mac - Bash $(pwd) Windows Powershell ${pwd} Windows Command Prompt %cd% You can see the differences in the command syntaxes. Docker - Bash Docker - Powershell Docker - Command Prompt docker run --rm -v $(pwd):/workdir openbcl/fds fds <filename>.fds docker run --rm -v ${pwd}:/workdir openbcl/fds fds <filename>.fds docker run --rm -v %cd%:/workdir openbcl/fds fds <filename>.fds xFDS eliminates this concern by using the absolute path in place of the shortcuts for the current directory. While generating the command to execute Docker, xFDS will also name the Docker container based on the file name and FDS version. For example, if you're in /home/pbdtools/models/single_mesh , executing xfds run will have the output below. xFDS Command xfds run Command called by xFDS docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds For the rest of the examples, the xFDS command will be shown, and you can tab over to the equivalent Docker command as follows. The current directory will also be shown. xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds Single vs Multiple Processors \u00b6 The only difference between running a single processor model and a MPI processor is supplying the number of processors desired with the -n flag. xFDS will automatically call mpiexec if needed. Single processor xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds Two processors xFDS Docker /home/pbdtools/models/multi_mesh/ xfds run -n 2 /home/pbdtools/models/multi_mesh/ docker run --rm --name multi_mesh-latest -v /home/pbdtools/models/multi_mesh:/workdir openbcl/fds:latest mpiexec -n 2 fds multi_mesh.fds Running From Different Directories \u00b6 From same directory as the fds file xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds From a parent directory xFDS Docker /home/pbdtools/models/ xfds run single_mesh /home/pbdtools/models/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds Multiple files in the same directory If there are multiple fds files in the directory, xFDS will default to the first one. xFDS Docker /home/pbdtools/models/multiple_files/ xfds run /home/pbdtools/models/multiple_files/ docker run --rm --name model_01-latest -v /home/pbdtools/models/multiple_files:/workdir openbcl/fds:latest fds model_01.fds If you want to run model_02.fds , you must specify it. xFDS Docker /home/pbdtools/models/multiple_files/ xfds run model_02.fds /home/pbdtools/models/multiple_files/ docker run --rm --name model_01-latest -v /home/pbdtools/models/multiple_files:/workdir openbcl/fds:latest fds model_02.fds Specifying FDS Version \u00b6 FDS Dockerfiles supports most versions of FDS. xFDS will default to the latest version. If you would like to specify an older version you can pass the desired version to xFDS. See the fds-dockerfiles repo for information on supported versions. These examples will pretend like you want to run FDS 6.7.5. xFDS will use the openbcl/fds:6.7.5 image and FDS version will be appended to the container name. This way it is clear what model and version are running. These subsections also indicate the priority of different methods. Specifying a version on the command line will take the highest precidence while a version in the file path will be the lowest priority. Command Line Argument \u00b6 xFDS (Long Flag) xFDS (Short Flag) Docker /home/pbdtools/models/single_mesh/ xfds run --fds 6.7.5 /home/pbdtools/models/single_mesh/ xfds run -v 6.7.5 /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds File Metadata \u00b6 xFDS supports metadata in FDS input files via the MultiMarkdown Specification . If you want to ensure a file is always run with the same version of FDS, you can specify a fds keyword at the top of the file and xFDS will call the appropriate container. This method has the benefit of documenting the intended version of FDS for a model which can be useful if you are returning to a project after a while. Furthermore, this prevents your models from unexpectedly running on a different version if a new version of FDS is released mid project. /home/pbdtools/models/single_mesh/single_mesh.fds fds: 6.7.5 --- &MESH / xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds File Path \u00b6 xFDS will read the full path to the model and determine if a folder is specifying a version of FDS. The version can use periods ( . ) or underscores ( _ ) and may be preceeded by either fds or v . The following paths are equivalent and all run FDS 6.7.5. /home/pbdtoos/models/6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/v6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/v.6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds.6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/v6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/v_6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds_6_7_5/single_mesh/single_mesh.fds xFDS Docker /home/pbdtools/models/6.7.5/single_mesh/ xfds run /home/pbdtools/models/6.7.5/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/6.7.5/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds This method is particularly useful if you have tests that you need to run on different versions. You can copy the entire directory over, rename the version folder, and then all the models will use that new version. Interactive Mode \u00b6 Interactive mode is useful if you need to quickly iterate on a given model, but don't want to incur the startup cost for the container. To enter interactive mode, pass the -i flag to xFDS. xFDS Docker /home/pbdtools/models/single_mesh/ xfds run -i /home/pbdtools/models/single_mesh/ docker run --rm -it --name fds-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest This will put you in a terminal inside the container. Inside Container root@00a83c3c6390:/workdir# pwd /workdir root@00a83c3c6390:/workdir# ls single_mesh.fds root@00a83c3c6390:/workdir# fds Fire Dynamics Simulator Current Date : June 23, 2022 19:44:42 Revision : FDS6.7.8-0-gfbf3e11ee-release Revision Date : Tue May 24 18:07:45 2022 -0400 Compiler : ifort version 2021.5.0 Compilation Date : May 25, 2022 06:01:34 MPI Enabled; Number of MPI Processes: 1 OpenMP Disabled MPI version: 3.1 MPI library version: Intel(R) MPI Library 2021.4 for Linux* OS Consult FDS Users Guide Chapter, Running FDS, for further instructions. root@00a83c3c6390:/workdir#","title":"xfds run"},{"location":"commands/run/#run-command","text":"","title":"Run Command"},{"location":"commands/run/#usage","text":"xfds run --help Usage: xfds run [OPTIONS] [FDS_FILE] COMMAND [ARGS]... Run an FDS in a Docker container. Arguments: [FDS_FILE] The FDS file or directory to run. If a **FDS file** is specified, the FDS model will run. If a **directory** is specified, xFDS will find the first FDS file in the directory and assume that is what it should run. If no fds file exists, xFDS will default to interactive mode. if **nothing** is specified, the current directory is used and the above rules are applied. [default: .] Options: -i, --interactive Launch Docke-r container in interactive mode (`docker run -it`). By default, the Docker image will run the FDS model, but interactive mode will put you into the container where you can start the FDS model manually. This is good for when you are rapidly iterating and don't want to wait for the Docker image load time. -n, --processors INTEGER RANGE Specify number of processors. If the number of processors is greater than 1, it will invoke MPI for you (`mpiexec -n #`). Ignored if interactive mode is enabled. [default: 1; x>=1] -v, --fds TEXT Specify FDS version to use. The FDS version can also be extracted from the file path or metadata in the FDS file. --help Show this message and exit. Developed by pbd.tools","title":"Usage"},{"location":"commands/run/#description","text":"The xFDS run command is a convience wrapper for docker run. xFDS determines the appropriate arguments for the model and exectues the docker run command for you. Unless stated otherwise, the commands below assume you are at /home/pbdtools/models with the following directory structure. Directory Structure under /home/pbdtools/models/ /home/pbdtools/models $ tree . \u251c\u2500\u2500 multi_mesh # More than 1 processor required \u2502 \u2514\u2500\u2500 multi_mesh.fds \u2502 \u251c\u2500\u2500 multiple_files # Multiple fds files in directory \u2502 \u251c\u2500\u2500 model_01.fds \u2502 \u2514\u2500\u2500 model_02.fds \u2502 \u2514\u2500\u2500 single_mesh # Only 1 processor required \u2514\u2500\u2500 single_mesh.fds","title":"Description"},{"location":"commands/run/#working-in-different-shells","text":"The xfds run command simplifies and unifies what you have to type into the terminal. The sytax for using FDS Dockerfiles without xFDS is sligntly different depending on what shell you're using. Each shell has it's own way of referring to the current directory. Linux / Mac - Bash $(pwd) Windows Powershell ${pwd} Windows Command Prompt %cd% You can see the differences in the command syntaxes. Docker - Bash Docker - Powershell Docker - Command Prompt docker run --rm -v $(pwd):/workdir openbcl/fds fds <filename>.fds docker run --rm -v ${pwd}:/workdir openbcl/fds fds <filename>.fds docker run --rm -v %cd%:/workdir openbcl/fds fds <filename>.fds xFDS eliminates this concern by using the absolute path in place of the shortcuts for the current directory. While generating the command to execute Docker, xFDS will also name the Docker container based on the file name and FDS version. For example, if you're in /home/pbdtools/models/single_mesh , executing xfds run will have the output below. xFDS Command xfds run Command called by xFDS docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds For the rest of the examples, the xFDS command will be shown, and you can tab over to the equivalent Docker command as follows. The current directory will also be shown. xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds","title":"Working in Different Shells"},{"location":"commands/run/#single-vs-multiple-processors","text":"The only difference between running a single processor model and a MPI processor is supplying the number of processors desired with the -n flag. xFDS will automatically call mpiexec if needed. Single processor xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds Two processors xFDS Docker /home/pbdtools/models/multi_mesh/ xfds run -n 2 /home/pbdtools/models/multi_mesh/ docker run --rm --name multi_mesh-latest -v /home/pbdtools/models/multi_mesh:/workdir openbcl/fds:latest mpiexec -n 2 fds multi_mesh.fds","title":"Single vs Multiple Processors"},{"location":"commands/run/#running-from-different-directories","text":"From same directory as the fds file xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds From a parent directory xFDS Docker /home/pbdtools/models/ xfds run single_mesh /home/pbdtools/models/ docker run --rm --name single_mesh-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest fds single_mesh.fds Multiple files in the same directory If there are multiple fds files in the directory, xFDS will default to the first one. xFDS Docker /home/pbdtools/models/multiple_files/ xfds run /home/pbdtools/models/multiple_files/ docker run --rm --name model_01-latest -v /home/pbdtools/models/multiple_files:/workdir openbcl/fds:latest fds model_01.fds If you want to run model_02.fds , you must specify it. xFDS Docker /home/pbdtools/models/multiple_files/ xfds run model_02.fds /home/pbdtools/models/multiple_files/ docker run --rm --name model_01-latest -v /home/pbdtools/models/multiple_files:/workdir openbcl/fds:latest fds model_02.fds","title":"Running From Different Directories"},{"location":"commands/run/#specifying-fds-version","text":"FDS Dockerfiles supports most versions of FDS. xFDS will default to the latest version. If you would like to specify an older version you can pass the desired version to xFDS. See the fds-dockerfiles repo for information on supported versions. These examples will pretend like you want to run FDS 6.7.5. xFDS will use the openbcl/fds:6.7.5 image and FDS version will be appended to the container name. This way it is clear what model and version are running. These subsections also indicate the priority of different methods. Specifying a version on the command line will take the highest precidence while a version in the file path will be the lowest priority.","title":"Specifying FDS Version"},{"location":"commands/run/#command-line-argument","text":"xFDS (Long Flag) xFDS (Short Flag) Docker /home/pbdtools/models/single_mesh/ xfds run --fds 6.7.5 /home/pbdtools/models/single_mesh/ xfds run -v 6.7.5 /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds","title":"Command Line Argument"},{"location":"commands/run/#file-metadata","text":"xFDS supports metadata in FDS input files via the MultiMarkdown Specification . If you want to ensure a file is always run with the same version of FDS, you can specify a fds keyword at the top of the file and xFDS will call the appropriate container. This method has the benefit of documenting the intended version of FDS for a model which can be useful if you are returning to a project after a while. Furthermore, this prevents your models from unexpectedly running on a different version if a new version of FDS is released mid project. /home/pbdtools/models/single_mesh/single_mesh.fds fds: 6.7.5 --- &MESH / xFDS Docker /home/pbdtools/models/single_mesh/ xfds run /home/pbdtools/models/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds","title":"File Metadata"},{"location":"commands/run/#file-path","text":"xFDS will read the full path to the model and determine if a folder is specifying a version of FDS. The version can use periods ( . ) or underscores ( _ ) and may be preceeded by either fds or v . The following paths are equivalent and all run FDS 6.7.5. /home/pbdtoos/models/6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/v6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/v.6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds.6.7.5/single_mesh/single_mesh.fds /home/pbdtoos/models/6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/v6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/v_6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds6_7_5/single_mesh/single_mesh.fds /home/pbdtoos/models/fds_6_7_5/single_mesh/single_mesh.fds xFDS Docker /home/pbdtools/models/6.7.5/single_mesh/ xfds run /home/pbdtools/models/6.7.5/single_mesh/ docker run --rm --name single_mesh-6.7.5 -v /home/cohan/github/pbdtools/models/6.7.5/single_mesh:/workdir openbcl/fds:6.7.5 fds single_mesh.fds This method is particularly useful if you have tests that you need to run on different versions. You can copy the entire directory over, rename the version folder, and then all the models will use that new version.","title":"File Path"},{"location":"commands/run/#interactive-mode","text":"Interactive mode is useful if you need to quickly iterate on a given model, but don't want to incur the startup cost for the container. To enter interactive mode, pass the -i flag to xFDS. xFDS Docker /home/pbdtools/models/single_mesh/ xfds run -i /home/pbdtools/models/single_mesh/ docker run --rm -it --name fds-latest -v /home/pbdtools/models/single_mesh:/workdir openbcl/fds:latest This will put you in a terminal inside the container. Inside Container root@00a83c3c6390:/workdir# pwd /workdir root@00a83c3c6390:/workdir# ls single_mesh.fds root@00a83c3c6390:/workdir# fds Fire Dynamics Simulator Current Date : June 23, 2022 19:44:42 Revision : FDS6.7.8-0-gfbf3e11ee-release Revision Date : Tue May 24 18:07:45 2022 -0400 Compiler : ifort version 2021.5.0 Compilation Date : May 25, 2022 06:01:34 MPI Enabled; Number of MPI Processes: 1 OpenMP Disabled MPI version: 3.1 MPI library version: Intel(R) MPI Library 2021.4 for Linux* OS Consult FDS Users Guide Chapter, Running FDS, for further instructions. root@00a83c3c6390:/workdir#","title":"Interactive Mode"},{"location":"commands/stop/","text":"Stop Command \u00b6 Usage \u00b6 xfds stop --help Usage: xfds stop [OPTIONS] [FILE] COMMAND [ARGS]... Stop an FDS simulation that is running locally by creating a .stop file. Arguments: [FILE] The FDS file or directory to stop. If a **FDS file** is specified, the FDS model will be stopped. If a **directory** is specified, xFDS will stop all FDS file in the directory. This is especially useful when &CATF is used.if **nothing** is specified, the current directory is used and the above rules are applied. [default: .] Options: --help Show this message and exit. Developed by pbd.tools Description \u00b6 The stop command creates a casename.stop file in the model directory telling FDS to gracefully terminate. If a FDS file is passed, xFDS will create a .stop file for that specific FDS file. Otherwise, xFDS will locate all FDS files in the directory and create .stop files for them. This is especially handy when &CATF is used and the actual model is casename_cat.fds . These two snippets are effecively the same. /path/to/model (With xFDS) xfds stop /path/to/model (Without xFDS) for f in *.fds ; do touch \" $f \" \" ${ f %.fds } .stop\" ; done","title":"xfds stop"},{"location":"commands/stop/#stop-command","text":"","title":"Stop Command"},{"location":"commands/stop/#usage","text":"xfds stop --help Usage: xfds stop [OPTIONS] [FILE] COMMAND [ARGS]... Stop an FDS simulation that is running locally by creating a .stop file. Arguments: [FILE] The FDS file or directory to stop. If a **FDS file** is specified, the FDS model will be stopped. If a **directory** is specified, xFDS will stop all FDS file in the directory. This is especially useful when &CATF is used.if **nothing** is specified, the current directory is used and the above rules are applied. [default: .] Options: --help Show this message and exit. Developed by pbd.tools","title":"Usage"},{"location":"commands/stop/#description","text":"The stop command creates a casename.stop file in the model directory telling FDS to gracefully terminate. If a FDS file is passed, xFDS will create a .stop file for that specific FDS file. Otherwise, xFDS will locate all FDS files in the directory and create .stop files for them. This is especially handy when &CATF is used and the actual model is casename_cat.fds . These two snippets are effecively the same. /path/to/model (With xFDS) xfds stop /path/to/model (Without xFDS) for f in *.fds ; do touch \" $f \" \" ${ f %.fds } .stop\" ; done","title":"Description"},{"location":"contributing/repo_overview/","text":".github \u00b6 This directory contains Github specific information. workflows \u00b6 The workflows folder contains all the Github Actions scripts. docs.yml : Publish the contents of /docs to https://xfds.pbd.tools release.yml : When a new release is initiated, this will run the tests one more time and then publish the new version to PyPI test.yml : Runs continuious integration tests. Ensures all tests are passing Determines how much of the code is covered by the tests Checks that all the code is formatted using black Lints the codebase for best practices and catching errors with flake8 Checks for security vulnerabilities with Safety Checks that all functions are correctly annotated with mypy .vscode \u00b6 The .vscode folder contains configuration for using the VS Code editor. You do not need to use VS Code, but this project is set up assuming you are. extensions.json : Recommended extensions from the VS Code Marketplace settings.json : Configuration options. docs \u00b6 Code for the documentation hosted at https://xfds.pbd.tools. Documentation is built on mkdocs and uses the Material Theme . You can include snippets from other files thanks to mdx_include . examples \u00b6 The examples directory show ways that xFDS can be used. Most of the examples are used in the documentation. Thanks to mdx-include , the code below includes /examples/variables/variables.fds . The documentation is configured to look in the examples directory when looking for files to include. mdx_include syntax {! hrrpua/hrrpua.fds !} included file { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / src/xfds \u00b6 This directory contains all the source code for the project. Common Files \u00b6 Thse files are files necesary to setup xFDS and pull the pieces together. __init__.py : Generally empty except for the software version number. cli.py : This file is the main entry point for the command line interface. config.py : Default settings for commands. core.py : Basic functions required by multiple commands. errors.py : Custom error types to make tracebacks more helpful. filters.py : Custom Jinja filters useful for creating models. log.py : Functions for printing information out to the terminal. units.py : Module for defining custom units and managing unit conversion. Command Specific Files \u00b6 Files that start with an underscore ( _ ) contain the logic for all the xFDS subcommands. _render.py See render command for more information _reset.py See reset command for more information _run.py See run command for more information _stop.py See stop command for more information Tests \u00b6 xFDS uses pytest to ensure things are working as expected. data : Example data for tests integration : Tests for ensuring xFDS works together as a whole. unit : Tests for individual pieces of code. conftest.py : Fixtures used across the test suite. Project Configuration Files \u00b6 .flake8 : configuration for linting .gitignore : Tell Git which files to ignore. .pre-commit-config.yaml : Checks to perform before committing code. docker-compose.yml : Spins up docker container to develop these docs. Mkdocs will crash sometimes when editing mkdocs.yml , so Docker will restart the server automatically. justfile : Common tasks for developing xFDS. LICENSE : Defines permissions for xFDS. mkdocs.yml : Configuration for documentation. mypy.ini : Configuration for static type checking. noxfile.py : Rules for testing xFDS on multiple versions of Python. These are checked with every push to the repo. poetry.lock : Pre-computed information for what packages xFDS needs. pyproject.toml : xFDS Pacakge configuration and metadata. README.md : High level info for the project.","title":"Repository Overview"},{"location":"contributing/repo_overview/#github","text":"This directory contains Github specific information.","title":".github"},{"location":"contributing/repo_overview/#workflows","text":"The workflows folder contains all the Github Actions scripts. docs.yml : Publish the contents of /docs to https://xfds.pbd.tools release.yml : When a new release is initiated, this will run the tests one more time and then publish the new version to PyPI test.yml : Runs continuious integration tests. Ensures all tests are passing Determines how much of the code is covered by the tests Checks that all the code is formatted using black Lints the codebase for best practices and catching errors with flake8 Checks for security vulnerabilities with Safety Checks that all functions are correctly annotated with mypy","title":"workflows"},{"location":"contributing/repo_overview/#vscode","text":"The .vscode folder contains configuration for using the VS Code editor. You do not need to use VS Code, but this project is set up assuming you are. extensions.json : Recommended extensions from the VS Code Marketplace settings.json : Configuration options.","title":".vscode"},{"location":"contributing/repo_overview/#docs","text":"Code for the documentation hosted at https://xfds.pbd.tools. Documentation is built on mkdocs and uses the Material Theme . You can include snippets from other files thanks to mdx_include .","title":"docs"},{"location":"contributing/repo_overview/#examples","text":"The examples directory show ways that xFDS can be used. Most of the examples are used in the documentation. Thanks to mdx-include , the code below includes /examples/variables/variables.fds . The documentation is configured to look in the examples directory when looking for files to include. mdx_include syntax {! hrrpua/hrrpua.fds !} included file { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' /","title":"examples"},{"location":"contributing/repo_overview/#srcxfds","text":"This directory contains all the source code for the project.","title":"src/xfds"},{"location":"contributing/repo_overview/#common-files","text":"Thse files are files necesary to setup xFDS and pull the pieces together. __init__.py : Generally empty except for the software version number. cli.py : This file is the main entry point for the command line interface. config.py : Default settings for commands. core.py : Basic functions required by multiple commands. errors.py : Custom error types to make tracebacks more helpful. filters.py : Custom Jinja filters useful for creating models. log.py : Functions for printing information out to the terminal. units.py : Module for defining custom units and managing unit conversion.","title":"Common Files"},{"location":"contributing/repo_overview/#command-specific-files","text":"Files that start with an underscore ( _ ) contain the logic for all the xFDS subcommands. _render.py See render command for more information _reset.py See reset command for more information _run.py See run command for more information _stop.py See stop command for more information","title":"Command Specific Files"},{"location":"contributing/repo_overview/#tests","text":"xFDS uses pytest to ensure things are working as expected. data : Example data for tests integration : Tests for ensuring xFDS works together as a whole. unit : Tests for individual pieces of code. conftest.py : Fixtures used across the test suite.","title":"Tests"},{"location":"contributing/repo_overview/#project-configuration-files","text":".flake8 : configuration for linting .gitignore : Tell Git which files to ignore. .pre-commit-config.yaml : Checks to perform before committing code. docker-compose.yml : Spins up docker container to develop these docs. Mkdocs will crash sometimes when editing mkdocs.yml , so Docker will restart the server automatically. justfile : Common tasks for developing xFDS. LICENSE : Defines permissions for xFDS. mkdocs.yml : Configuration for documentation. mypy.ini : Configuration for static type checking. noxfile.py : Rules for testing xFDS on multiple versions of Python. These are checked with every push to the repo. poetry.lock : Pre-computed information for what packages xFDS needs. pyproject.toml : xFDS Pacakge configuration and metadata. README.md : High level info for the project.","title":"Project Configuration Files"},{"location":"contributing/setup/","text":"Setting up for Development \u00b6 You can work from anywhere on your system, however, these instructions assume you're on a unix operating system, have the username pbdtools and the code will be located at /home/pbdtools/xfds/ . Install xFDS required software \u00b6 Refer to the xFDS installation instructions Install Git \u00b6 Info Installing Git Install Git on your machine. Git is used for version control and must be used to contribute to the code base. Once you have Git installed, follow the first time Git setup instructions. /home/pbdtools git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Fork and Clone the Repository \u00b6 Go to the project repository and in the top right of the page, click \"fork\" to make a fork of the repository in your account. Navigate to where you want to copy the files and clone your fork of the repository. Make sure to change <USERNAME> to your Github user name. /home/pbdtools/ git clone https://github.com/<USERNAME>/xfds.git cd xfds Install Poetry \u00b6 Info Installing Poetry Poetry is used to manage dependencies and build xFDS for distribution. Follow their installation instructions for your operating system. Once Python and Poetry are installed, you can install the required packages with the poetry install command. /home/pbdtools/xfds/ poetry install Setting up for Testing \u00b6 Install Nox \u00b6 Nox is used to test xFDS on different versions of Python. A whole suite of tests are defined in noxfile.py The Nox documentation suggests installing nox with pip , but pipx will isolate Nox from any other dependencies pipx pip /home/pbdtools/ pipx install nox /home/pbdtools/ pip install --user --upgrade nox Other Tools \u00b6 Just \u00b6 Info Installing Just Just provides a way to save and run project-specific commands. These commands are stored in the justfile . Follow their installation instructions for your operating system. Below are some example commands and their equivalents. Install Project Dependencies just poetry /home/pbdtools/xfds just install /home/pbdtools/xfds poetry install Run pre-commit on All Files just poetry /home/pbdtools/xfds just check /home/pbdtools/xfds poetry run pre-commit run --all-files Run pytest Suite on All Versions of Python just nox /home/pbdtools/xfds just tests /home/pbdtools/xfds nox -rs tests Install Current Development Version with pipx just pipx /home/pbdtools/xfds just pipx /home/pbdtools/xfds rm -Rf dist poetry build pipx install --force `find ./dist -name \"*.whl\" | sort | tail -n 1` View Documentation just poetry /home/pbdtools/xfds just docs /home/pbdtools/xfds poetry run mkdocs serve","title":"Getting Set Up"},{"location":"contributing/setup/#setting-up-for-development","text":"You can work from anywhere on your system, however, these instructions assume you're on a unix operating system, have the username pbdtools and the code will be located at /home/pbdtools/xfds/ .","title":"Setting up for Development"},{"location":"contributing/setup/#install-xfds-required-software","text":"Refer to the xFDS installation instructions","title":"Install xFDS required software"},{"location":"contributing/setup/#install-git","text":"Info Installing Git Install Git on your machine. Git is used for version control and must be used to contribute to the code base. Once you have Git installed, follow the first time Git setup instructions. /home/pbdtools git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com","title":"Install Git"},{"location":"contributing/setup/#fork-and-clone-the-repository","text":"Go to the project repository and in the top right of the page, click \"fork\" to make a fork of the repository in your account. Navigate to where you want to copy the files and clone your fork of the repository. Make sure to change <USERNAME> to your Github user name. /home/pbdtools/ git clone https://github.com/<USERNAME>/xfds.git cd xfds","title":"Fork and Clone the Repository"},{"location":"contributing/setup/#install-poetry","text":"Info Installing Poetry Poetry is used to manage dependencies and build xFDS for distribution. Follow their installation instructions for your operating system. Once Python and Poetry are installed, you can install the required packages with the poetry install command. /home/pbdtools/xfds/ poetry install","title":"Install Poetry"},{"location":"contributing/setup/#setting-up-for-testing","text":"","title":"Setting up for Testing"},{"location":"contributing/setup/#install-nox","text":"Nox is used to test xFDS on different versions of Python. A whole suite of tests are defined in noxfile.py The Nox documentation suggests installing nox with pip , but pipx will isolate Nox from any other dependencies pipx pip /home/pbdtools/ pipx install nox /home/pbdtools/ pip install --user --upgrade nox","title":"Install Nox"},{"location":"contributing/setup/#other-tools","text":"","title":"Other Tools"},{"location":"contributing/setup/#just","text":"Info Installing Just Just provides a way to save and run project-specific commands. These commands are stored in the justfile . Follow their installation instructions for your operating system. Below are some example commands and their equivalents. Install Project Dependencies just poetry /home/pbdtools/xfds just install /home/pbdtools/xfds poetry install Run pre-commit on All Files just poetry /home/pbdtools/xfds just check /home/pbdtools/xfds poetry run pre-commit run --all-files Run pytest Suite on All Versions of Python just nox /home/pbdtools/xfds just tests /home/pbdtools/xfds nox -rs tests Install Current Development Version with pipx just pipx /home/pbdtools/xfds just pipx /home/pbdtools/xfds rm -Rf dist poetry build pipx install --force `find ./dist -name \"*.whl\" | sort | tail -n 1` View Documentation just poetry /home/pbdtools/xfds just docs /home/pbdtools/xfds poetry run mkdocs serve","title":"Just"},{"location":"files/config/","text":"Info For users who are not faimilar with yaml, learnxinyminutes.com provides a good way to learn yaml pretty quickly. The configuration file is a yaml file that tells xfds how you want things to work. It should be located at the top directory for your modeling project. xFDS will look for the configuration file, pbd.yml when it is called ( pbd.yaml is also acceptable). All configurations for xFDS start with the xfds keyword followed by the xFDS command and it's options. /path/to/project/pbd.yml xfds : render : # render command options ... reset : # reset command options ... run : # run command options ... Render \u00b6 The xfds render command takes a list of objects that define the model and associated data. Each object takes the following parameters: name : The name to be used for naming the output files. The name should contain placeholders for variables to ensure unique file names. The file extension for the output files is taken from the given input file. files : Names of the input files to be included in the output directory. The input files are templates used for each scenarios. variables : A list of default variables to send to the fds template while rendering the output files. These variables are not considered in generating scenarios. parameters : Variables defined in the parameters section will tell xFDS which parameters to use in generating scenarios. All variables defined here should have a list of values to consider. include : Directive defining extra information to add to scenarios. exclude : Directive defining conditions for removing scenarios. Warning The name parameter must start with a letter xfds : render : - name : 2-way-flow # This is invalid files : - input.fds - name : two-way-flow # This works files : - input.fds The example below shows a configuration for a mesh sensitivity study. This assumes there is a file sensitivity.fds in the same directory and that the file looks for two variables, hrr and resolution . Running xfds render will generate three output files: sensitivity_10cm.fds sensitivity_15cm.fds sensitivity_20cm.fds pbd.yml xfds : render : - name : sensitivity_{{resolution * 100}}cm files : - sensitivity.fds variables : hrr : 1000 parameters : resolution : [ 0.10 , 0.15 , 0.20 ] Parameters \u00b6 All parameters defined under the parameters option are used to generate the different scenarios. The input below will generate a series of models. The include and exclude directives will modify the scenarios as described below. examples/simple_atrium/pbd.yml xfds : render : - name : atrium_{{cfm}}_{{mua_perc}} files : - simple_atrium.fds variables : ... parameters : cfm : [ 100_000 , 125_000 , 150_000 ] # cfm mua_perc : [ 0 , 85 , 90 , 95 ] # % include : # Open doors if makeup air percentage is 0 - mua_perc : 0 open_doors : true exclude : # Not enough duct area to supply > 90% of cfm - cfm : 150_000 mua_perc : 95 - cfm : 150_000 mua_perc : 90 Twelve scenarios were generated. There are 3 values for cfm and 4 values for mua_perc . Every combination of values are listed below. Initial Scenarios { cfm : 100_000 , mua_perc : 0 } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 } { cfm : 150_000 , mua_perc : 85 } { cfm : 150_000 , mua_perc : 90 } { cfm : 150_000 , mua_perc : 95 } Warning Each parameter must have a value that is iterable (a list of values). pbd.yml parameters : single_line : [ 1 , 2 , 3 ] multile_line : - 1 - 2 - 3 single_value_iterable : [ 42 ] # lists can have a single value These will not work pbd.yml parameters : single_value_not_iterable : 42 # scalar value must be in a list parenthesis_are_not_valid : (1, 2, 3) # syntax error Include directive \u00b6 The include directive will update the models in the order they are defined. xFDS will determine which keys in the directive match parameters already defined. If the values of the keys match the parameters, the additional records in the directive will be appended to the scenario. In this example, we have a directive that says \"any scenario where the makeup air percentage is 0%, add open_doors = true \" Scenarios after Include { cfm : 100_000 , mua_perc : 0 , open_doors : True } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 , open_doors : True } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 , open_doors : True } { cfm : 150_000 , mua_perc : 85 } { cfm : 150_000 , mua_perc : 90 } { cfm : 150_000 , mua_perc : 95 } Exclude Directive \u00b6 The exclude directive will eliminate scenarios matching each directive given. In this example, the configuration file is stating \"for an exhaust rate of 150,000 cfm, there is not enough mechanical makeup air supply to reach >= 90% of the flow.\" These scenarios are removed accordingly. Scenarios after Exclude { cfm : 100_000 , mua_perc : 0 , open_doors : True } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 , open_doors : True } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 , open_doors : True } { cfm : 150_000 , mua_perc : 85 } In the end, 10 scenarios remain and xFDS will generate 10 models. Reset \u00b6 When testing out changes in models, it is sometimes useful to remove the old output files. The xfds reset command will delete all files in the directory unless they match a specified pattern. To keep certain files when xfds reset is run, specify the file patterns with the keep parameter. Use glob patterns to specify which files you want to keep. pbd.yml xfds : reset : keep : - '*.fds' - '*.ini' - '*.in' - '*.zip' Run \u00b6 Configuration options are not available at this time. See the run command for more information","title":"pbd.yml (Config File)"},{"location":"files/config/#render","text":"The xfds render command takes a list of objects that define the model and associated data. Each object takes the following parameters: name : The name to be used for naming the output files. The name should contain placeholders for variables to ensure unique file names. The file extension for the output files is taken from the given input file. files : Names of the input files to be included in the output directory. The input files are templates used for each scenarios. variables : A list of default variables to send to the fds template while rendering the output files. These variables are not considered in generating scenarios. parameters : Variables defined in the parameters section will tell xFDS which parameters to use in generating scenarios. All variables defined here should have a list of values to consider. include : Directive defining extra information to add to scenarios. exclude : Directive defining conditions for removing scenarios. Warning The name parameter must start with a letter xfds : render : - name : 2-way-flow # This is invalid files : - input.fds - name : two-way-flow # This works files : - input.fds The example below shows a configuration for a mesh sensitivity study. This assumes there is a file sensitivity.fds in the same directory and that the file looks for two variables, hrr and resolution . Running xfds render will generate three output files: sensitivity_10cm.fds sensitivity_15cm.fds sensitivity_20cm.fds pbd.yml xfds : render : - name : sensitivity_{{resolution * 100}}cm files : - sensitivity.fds variables : hrr : 1000 parameters : resolution : [ 0.10 , 0.15 , 0.20 ]","title":"Render"},{"location":"files/config/#parameters","text":"All parameters defined under the parameters option are used to generate the different scenarios. The input below will generate a series of models. The include and exclude directives will modify the scenarios as described below. examples/simple_atrium/pbd.yml xfds : render : - name : atrium_{{cfm}}_{{mua_perc}} files : - simple_atrium.fds variables : ... parameters : cfm : [ 100_000 , 125_000 , 150_000 ] # cfm mua_perc : [ 0 , 85 , 90 , 95 ] # % include : # Open doors if makeup air percentage is 0 - mua_perc : 0 open_doors : true exclude : # Not enough duct area to supply > 90% of cfm - cfm : 150_000 mua_perc : 95 - cfm : 150_000 mua_perc : 90 Twelve scenarios were generated. There are 3 values for cfm and 4 values for mua_perc . Every combination of values are listed below. Initial Scenarios { cfm : 100_000 , mua_perc : 0 } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 } { cfm : 150_000 , mua_perc : 85 } { cfm : 150_000 , mua_perc : 90 } { cfm : 150_000 , mua_perc : 95 } Warning Each parameter must have a value that is iterable (a list of values). pbd.yml parameters : single_line : [ 1 , 2 , 3 ] multile_line : - 1 - 2 - 3 single_value_iterable : [ 42 ] # lists can have a single value These will not work pbd.yml parameters : single_value_not_iterable : 42 # scalar value must be in a list parenthesis_are_not_valid : (1, 2, 3) # syntax error","title":"Parameters"},{"location":"files/config/#include-directive","text":"The include directive will update the models in the order they are defined. xFDS will determine which keys in the directive match parameters already defined. If the values of the keys match the parameters, the additional records in the directive will be appended to the scenario. In this example, we have a directive that says \"any scenario where the makeup air percentage is 0%, add open_doors = true \" Scenarios after Include { cfm : 100_000 , mua_perc : 0 , open_doors : True } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 , open_doors : True } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 , open_doors : True } { cfm : 150_000 , mua_perc : 85 } { cfm : 150_000 , mua_perc : 90 } { cfm : 150_000 , mua_perc : 95 }","title":"Include directive"},{"location":"files/config/#exclude-directive","text":"The exclude directive will eliminate scenarios matching each directive given. In this example, the configuration file is stating \"for an exhaust rate of 150,000 cfm, there is not enough mechanical makeup air supply to reach >= 90% of the flow.\" These scenarios are removed accordingly. Scenarios after Exclude { cfm : 100_000 , mua_perc : 0 , open_doors : True } { cfm : 100_000 , mua_perc : 85 } { cfm : 100_000 , mua_perc : 90 } { cfm : 100_000 , mua_perc : 95 } { cfm : 125_000 , mua_perc : 0 , open_doors : True } { cfm : 125_000 , mua_perc : 85 } { cfm : 125_000 , mua_perc : 90 } { cfm : 125_000 , mua_perc : 95 } { cfm : 150_000 , mua_perc : 0 , open_doors : True } { cfm : 150_000 , mua_perc : 85 } In the end, 10 scenarios remain and xFDS will generate 10 models.","title":"Exclude Directive"},{"location":"files/config/#reset","text":"When testing out changes in models, it is sometimes useful to remove the old output files. The xfds reset command will delete all files in the directory unless they match a specified pattern. To keep certain files when xfds reset is run, specify the file patterns with the keep parameter. Use glob patterns to specify which files you want to keep. pbd.yml xfds : reset : keep : - '*.fds' - '*.ini' - '*.in' - '*.zip'","title":"Reset"},{"location":"files/config/#run","text":"Configuration options are not available at this time. See the run command for more information","title":"Run"},{"location":"files/input/","text":"Note This page provides examples for how to write FDS files. However, all file listed under the xfds.render.files in the config file will have access to the template syntax described below. Example All the input and output files on this page can be found in the xFDS Examples directory . xFDS allows you to add more features to your FDS input files using the Jinja template syntax . While this page covers a high level overview of the Jinja syntax, the user is encouraged to read the Jinja documentation for more information. xFDS uses Jinja's default delimeters. They are: {{ ... }} indicates an expression . This can be a variable, calculation, or a function call. {% ... %} indicates a statement such as if/else conditionals and loops. {# ... #} indicates a comment and the contents of the block will be removed from the final fds file. Normal FDS syntax is always valid, but you can use Jinja to help build your FDS lines. Defining Variables \u00b6 Jinja Docs See the Jinja documentation for more information on variables The ability to set and use variables is what makes xFDS so powerful. There are two ways to define variables for your model. Using Jinja's Assignments \u00b6 Jinja allows you to assign values in the middle of your template. This can be useful when you want to use a value several times without having to type the value out each time. Variables also make it easy to keep things consistent. The variable may also be dynamic based on other inputs. The following example automatically calculates the HRRPUA parameter and XB bounds for a 1000 kW fire on a 1.5 m 2 burner. Note how: Line 9 : top is set so that the &VENT always sits on the top of the &OBST. Updating the variable will set the zmin and zmax for the &VENT as well as the zmax for the &OBST. Line 10 : area is defined in at the top, but the length of a side (for a square burner) is calculated in the template. Line 11 : r (radius) is defined to be half the length of a side. This helps define the XB so the burner is perfectly centered regardless of the area. Line 12 : HRRPUA is calculated based on the hrr and area variables defined. This way HRRPUA is always correct if either hrr or area are updated. Lines 13-14 : The XB parameters use r , top , and depth to ensure the burner is centered and that the &VENT always aligns with &OBST. examples/hrrpua/hrrpua.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / examples/hrrpua/output/hrrpua/hrrpua.fds 1 2 3 4 5 6 7 & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.000 , 0.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.200 , 0.200 , SURF_ID = 'BURNER' / Variables can be set multiple times If a variable needs to take on different values for different parts of the model, the variable can be assigned a new value. Note how top is redefined on line 16 and lines 17-18 are the same as lines 13-14. This will change the zmin and zmax values for the second burner. examples/hrrpua2/hrrpua2.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / { % set top = 1.2 % } & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / examples/hrrpua2/output/hrrpua2/hrrpua2.fds 1 2 3 4 5 6 7 8 9 10 & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.000 , 0.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.200 , 0.200 , SURF_ID = 'BURNER' / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 1.000 , 1.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 1.200 , 1.200 , SURF_ID = 'BURNER' / In the Configuration File \u00b6 When generating multiple output files from a single fds input file, a configuration file should be used. See Configuration for more details. Control Structures \u00b6 If Statements \u00b6 Jinja Docs See the Jinja documentation for more information on if statements . To make FDS records optional, use an if statement. The expression following the if keyword must evaluate to True or False . See this Real Python article for more information on how Python evaluates \"truthiness\". In the example below, a varibale is defined for opening the mesh boundaries vs leaving them closed (default in FDS). Note how the only difference between the two files are the value of bounds on line 1. When the bounds are closed , the &VENT lines are omitted from the output file. Open Bounds examples/bounds_open/bounds_open.fds 1 2 3 4 5 6 7 8 9 10 { % set bounds = \"open\" -% } & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / { % if bounds == \"open\" % } & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / { % endif % } examples/bounds_open/output/bounds_open/bounds_open.fds 1 2 3 4 5 6 & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / Closed Bounds examples/bounds_closed/bounds_closed.fds 1 2 3 4 5 6 7 8 9 10 { % set bounds = closed -% } & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / { % if bounds == \"open\" % } & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / { % endif % } examples/bounds_closed/output/bounds_closed/bounds_closed.fds 1 & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / If the model requires mutally exclusive options, if / elif / else blocks can be used. { % if ventillation == \"natural\" % } # open doors and windows { % elif ventillation == \"mechanical\" % } # insert fans { % else % } # room is sealed { % endif % } For Loops \u00b6 Jinja Docs See the Jinja documentation for more information on for loops Sometimes it is beneficial to iterate through a list or quickly generate an array of items. While some FDS records can be duplicated with a &MULT record, this is not always the case. Imagine needing to quickly layout a grid of sprinklers, and the sprinklers need to have unique names (e.g. for developing &CTRL records). Devices do not support &MULT records. For loops can assist in generating the sprinkler grid while calculating the position for each sprinkler individually. By defining the number of sprinklers in each direction ( nx , ny ) and the sprinkler spacing , the location of the sprinklers are determined. The linspace filter will create nx sprinklers evenly spaced between -dx / 2 and dx / 2 and simlar for the y direction. examples/sprinkler_loop/sprinkler_loop.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { % set nx = 6 % } { % set ny = 4 % } { % set offset = 0.3048 % } { % set spacing = 2.438 % } { % set dx = spacing * ( nx - 1 ) % } { % set dy = spacing * ( ny - 1 ) % } { % set zmax = 3 % } { % set res = 0.2 % } { % set mesh = - dx / 2 , dx / 2 , - dy / 2 , dy / 2 , 0 , zmax -% } & MESH XB = {{ mesh | xb }}, IJK = {{ mesh | ijk ( res ) }} & PROP ID = 'Link' , QUANTITY = 'SPRINKLER LINK TEMPERATURE' , ACTIVATION_TEMPERATURE = 74 / { % for x in nx | linspace ( - dx / 2 , dx / 2 ) % } { % set i = loop . index % } { % for y in ny | linspace ( - dy / 2 , dy / 2 ) % } { % set j = loop . index % } & DEVC ID = 'SPR_{{i}}_{{j}}' , XYZ = {{ ( x , y , zmax - offset ) | xyz }}, PROP_ID = 'Link' / { % endfor % } { % endfor % } & OBST XB = {{ ( - 0.5 , 0.5 , - 0.5 , 0.5 , 0.0 , 0.1 ) | xb }}, COLOR = 'RED' / Tip When looping, it might be useful to know what loop iteration is being processed. The loop index can be accessed by {{ loop.index }} . This is used to set i and j for the device naming scheme above. Note how each sprinkler has a unique ID and the &MESH will adjust based on the number of sprinklers. Additionally, the &OBST representing the burner is perfectly centered between the 4 central sprinklers! examples/sprinkler_loop/output/sprinkler_loop/sprinkler_loop.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 & MESH XB = - 6.095 , 6.095 , - 3.657 , 3.657 , 0.000 , 3.000 , IJK = 61 , 37 , 15 & PROP ID = 'Link' , QUANTITY = 'SPRINKLER LINK TEMPERATURE' , ACTIVATION_TEMPERATURE = 74 / & DEVC ID = 'SPR_1_1' , XYZ = - 6.095 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_2' , XYZ = - 6.095 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_3' , XYZ = - 6.095 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_4' , XYZ = - 6.095 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_1' , XYZ = - 3.657 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_2' , XYZ = - 3.657 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_3' , XYZ = - 3.657 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_4' , XYZ = - 3.657 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_1' , XYZ = - 1.219 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_2' , XYZ = - 1.219 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_3' , XYZ = - 1.219 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_4' , XYZ = - 1.219 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_1' , XYZ = 1.219 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_2' , XYZ = 1.219 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_3' , XYZ = 1.219 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_4' , XYZ = 1.219 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_1' , XYZ = 3.657 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_2' , XYZ = 3.657 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_3' , XYZ = 3.657 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_4' , XYZ = 3.657 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_1' , XYZ = 6.095 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_2' , XYZ = 6.095 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_3' , XYZ = 6.095 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_4' , XYZ = 6.095 , 3.657 , 2.695 , PROP_ID = 'Link' / & OBST XB = - 0.500 , 0.500 , - 0.500 , 0.500 , 0.000 , 0.100 , COLOR = 'RED' / Macros \u00b6 Jinja Docs See the Jinja documentation for more information on macros Macros are useful when defining complex elements that require multiple lines of FDS code or simple elements that are reused multiple times. For example, defining a simple leakage path through a door requires at least three different FDS records, two &VENTs and one &HVAC. It may be beneficial to include an &OBST record to ensure the &VENT records are applied to a solid surface. The example below creates doors along a wall in a corridor. A macro is defined on line 11 that takes in four parameters: the x position of the door, width and height of the door, and the leakage area. (The y position is fixed along the wall). The macro will determine the extends of the XB parameters and use a consistent naming scheme to tie the elements together. Tip Macros can be called by passing in a list of values, or by specifying the parameter and value. Both options work the same, but specifying the parameter and value will make the file more readable. 38 {{ door ( 1.0 , 1.0 , 2.0 , 0.3 ) }} 41 {{ door ( x = 3.0 , width = 2.0 , height = 2.0 , leak_area = 0.6 ) }} Additionally, tenability devices are placed at 1 meter intervals along the corridor. A macro is defined on line 19 to ensure all the tenability criteria are defined at each location (visibility, temperature, O 2 , CO 2 , CO). The macro takes the x and y positions and will place all five devices at that location (the z position is hard coded in this example). A for loop (line 44) is used to set the 1 meter spacing starting at x = 1 m until the end of the corridor is reached. examples/leaks/leaks.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { % set x0 = 0 -% } { % set x1 = 6 -% } { % set y0 = 0 -% } { % set y1 = 3 -% } { % set z0 = 0 -% } { % set z1 = 3 -% } { % set res = 0.1 -% } { % set ns = namespace ( door_id = 0 , devc_loc = 0 ) -% } { % macro door ( x , width , height , leak_area ) -% } { % set ns . door_id = ns . door_id + 1 % } & OBST ID = 'Door_{{ ns.door_id }}' , XB = {{ ( x , x + width , 2.0 , 2.2 , 0.0 , height ) | xb }} / & VENT ID = 'Door_{{ ns.door_id }}_i' , XB = {{ ( x , x + width , 2.0 , 2.0 , 0.0 , height ) | xb }}, SURF_ID = 'LEAK' / & VENT ID = 'Door_{{ ns.door_id }}_o' , XB = {{ ( x , x + width , 2.2 , 2.2 , 0.0 , height ) | xb }}, SURF_ID = 'LEAK' / & HVAC ID = 'Door_{{ ns.door_id }}_l' , VENT_ID = 'Door_{{ ns.door_id }}_i' , VENT2_ID = 'Door_{{ ns.door_id }}_o' , AREA = {{ leak_area }}, TYPE_ID = 'LEAK' / { %- endmacro -% } { % macro tenability ( x , y ) -% } { % set ns . devc_loc = ns . devc_loc + 1 % } & DEVC ID = 'VIS_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / { %- endmacro -% } # Corridor with open ends and wall on one side { % set mesh = x0 , x1 , y0 , y1 , z0 , z1 % } & MESH XB = {{ mesh | xb }}, IJK = {{ mesh | ijk ( res ) }} / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & OBST XB = {{ ( x0 , x1 , 2.0 , 2.2 , z0 , z1 ) | xb }} / & SURF ID = 'LEAK' , COLOR = 'FIREBRICK' / # Single Door {{ door ( 1.0 , 1.0 , 2.0 , 0.3 ) }} # Double Door {{ door ( x = 3.0 , width = 2.0 , height = 2.0 , leak_area = 0.6 ) }} # Tenability Devices { % for x in range ( 1 , x1 ) % } {{ tenability ( x , 1.0 )}} { % endfor % } examples/leaks/output/leaks/leaks.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # Corridor with open ends and wall on one side & MESH XB = 0.000 , 6.000 , 0.000 , 3.000 , 0.000 , 3.000 , IJK = 60 , 30 , 30 / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & OBST XB = 0.000 , 6.000 , 2.000 , 2.200 , 0.000 , 3.000 / & SURF ID = 'LEAK' , COLOR = 'FIREBRICK' / # Single Door & OBST ID = 'Door_1' , XB = 1.000 , 2.000 , 2.000 , 2.200 , 0.000 , 2.000 / & VENT ID = 'Door_1_i' , XB = 1.000 , 2.000 , 2.000 , 2.000 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & VENT ID = 'Door_1_o' , XB = 1.000 , 2.000 , 2.200 , 2.200 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & HVAC ID = 'Door_1_l' , VENT_ID = 'Door_1_i' , VENT2_ID = 'Door_1_o' , AREA = 0.3 , TYPE_ID = 'LEAK' / # Double Door & OBST ID = 'Door_2' , XB = 3.000 , 5.000 , 2.000 , 2.200 , 0.000 , 2.000 / & VENT ID = 'Door_2_i' , XB = 3.000 , 5.000 , 2.000 , 2.000 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & VENT ID = 'Door_2_o' , XB = 3.000 , 5.000 , 2.200 , 2.200 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & HVAC ID = 'Door_2_l' , VENT_ID = 'Door_2_i' , VENT2_ID = 'Door_2_o' , AREA = 0.6 , TYPE_ID = 'LEAK' / # Tenability Devices & DEVC ID = 'VIS_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / Tip Use namespace to set up a counter that can be incremented to ensure unique IDs. Counters are initialized on line 9 as follows: 9 { % set ns = namespace ( door_id = 0 , devc_loc = 0 ) -% } The following lines are located at the top of the respective macros and will increment the number by 1 every time the macro is called. 12 { % set ns . door_id = ns . door_id + 1 % } 20 { % set ns . devc_loc = ns . devc_loc + 1 % } Filters \u00b6 Jinja Filters \u00b6 Jinja Docs See the Jinja documentation for more information on filters . Filters can modify the value of a variable or expression. This is useful when you need to ensure values follow a certain format or if a value needs to be modified. The examples below demonstrate how to use some of the built-in filters provided by Jinja. Absolute Value \u00b6 examples/filters/abs.fds 1 {{ - 42 | abs }} examples/filters/output/filters/abs.fds 1 42 Center Text \u00b6 examples/filters/center.fds 1 \"{{ \" xFDS \"|center(10) }}\" examples/filters/output/filters/center.fds 1 \" xFDS \" Convert to Float \u00b6 Tip In addition to the float filter, this example uses python's printf-style formatting along with the format filter to control the number of decimals displayed. %7.4f\"|format(x) tells xFDS how to format the value of x . %f : format as a float %.3f : format as a float to 3 decimals %8.3f : format as float to 3 decimals and a fixed width of 8 characters (includes decimal ' . ', sign ' - ', and extra white space at the beginning) examples/filters/float.fds 1 2 3 4 {{ 42 | float }} {{ \" %f \" | format ( 42 )}} {{ \" %.3f \" | format ( 42 )}} \"{{ \" % 8.3 f \"|format(-42) }} \" examples/filters/output/float/float.fds 1 2 3 4 42.0 42.000000 42.000 \" -42.000\" Convert to integer \u00b6 examples/filters/int.fds 1 2 {{ 42.0 | int }} {{ \" %d \" | format ( 42.0 )}} examples/filters/output/int/int.fds 1 2 42 42 Maximum Value \u00b6 examples/filters/max.fds 1 {{ [ 1 , 2 , 3 ] | max }} examples/filters/output/max/max.fds 1 3 Minimum Value \u00b6 examples/filters/min.fds 1 {{ [ 1 , 2 , 3 ] | min }} examples/filters/output/min/min.fds 1 1 Round Value \u00b6 examples/filters/round.fds 1 {{ 3.14159 | round ( 3 )}} examples/filters/output/round/round.fds 1 3.142 Trim Text \u00b6 examples/filters/trim.fds 1 \"{{ ' xFDS '|trim }}\" examples/filters/output/trim/trim.fds 1 \"xFDS\" Filter Unique Values \u00b6 examples/filters/unique.fds 1 2 # unique {{ [ 1 , 1 , 2 , 2 ] | unique | list }} examples/filters/output/unique/unique.fds 1 2 # unique [ 1 , 2 ] Text to Uppercase \u00b6 examples/filters/upper.fds 1 {{ 'pbd tools' | upper }} examples/filters/output/upper/upper.fds 1 PBD TOOLS xFDS Custom Filters \u00b6 In addition to the built-in filters that comes with Jinja, xFDS ships with some additional filters useful for creating FDS records. ARange \u00b6 To create evenly spaced items, Python's range() function could be used, but it requires integer values for its parameters. Numpy's arange() function allows floats to be used. xFDS defines this as a filter for convience. examples/filters/arange.fds 1 2 3 4 5 6 7 8 { % for x in 0.25 | arange ( 1.5 , 2.5 ) % } & DEVC XYZ = {{ ( x , 0 , 0 ) | xyz }}, .../ { % endfor % } { # This would cause an error for x in range ( 1.5 , 2.5 , 0.25 ) #} examples/filters/output/arange/arange.fds 1 2 3 4 & DEVC XYZ = 1.500 , 0.000 , 0.000 , .../ & DEVC XYZ = 1.750 , 0.000 , 0.000 , .../ & DEVC XYZ = 2.000 , 0.000 , 0.000 , .../ & DEVC XYZ = 2.250 , 0.000 , 0.000 , .../ Convert \u00b6 Thanks to the magic of pint , xFDS will allow you to convert between units. You can define values in the config file with the desired units (determined by you) while ensuring that the correct units are passed to FDS. The convert will return a float type which could be used in further calculations. If the conversion will be part of the final output, the formatting can be controlled by using the format and convert filters together. Alternatively, str_convert can be used to improve readability. Info List of supported units defined by pint. List of custom units defined by xFDS. Pint allows custom units to be defined. xFDS will detect a file called units.txt located in the same directory as the configuration file. Here is a simple definition of a smoot . examples/filters/units.txt 1 smoot = 1.702 * meter examples/filters/convert.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {{ 212 | convert ( 'degF' , 'degC' ) }} {{ 212 | str_convert ( 'degF' , 'degC' , ' %.0f ' ) }} {{ ' %.0f ' | format ( 212 | convert ( 'degF' , 'degC' )) }} {{ 6 | convert ( 'ft' , 'm' )}} {{ 6 | str_convert ( 'ft' , 'm' , ' %.3f ' )}} {{ 100_000 | convert ( 'ft^3/min' , 'm^3/s' )}} {{ 100_000 | convert ( 'cfm' , 'm^3/s' )}} {{ 100_000 | str_convert ( 'cfm' , 'm^3/s' , ' %.2f ' )}} {{ 1_000 | convert ( 'BTU/s' , 'kW' )}} {{ 1 | convert ( 'smoot' , 'm' )}} {{ 1 | convert ( 'smoot' , 'ft' )}} {{ 1 | str_convert ( 'smoot' , 'ft' , ' %.3f ' )}} examples/filters/output/convert/convert.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 100.00000000000006 100 100 1.8287999999999998 1.829 47.19474431999999 47.19474431999999 47.19 1055.056 1.702 5.583989501312336 5.584 DXB \u00b6 Similar to the xb filter below, dxb takes a triplet representing the anchor point (x, y, z) and parameters to set the width, depth, and height respectfully. Specify xloc , yloc , or zloc as min , max , or mid to indicate how the anchor point should be treated. dxb also accepts a format string. examples/filters/dxb.fds 1 2 3 4 5 6 7 8 9 10 11 # Centered at (0, 0, 0) by default & OBST XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 4 , 1 )}} / # Only xmax and zmin are `0`, & OBST XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 4 , 1 , xloc = 'max' , yloc = 'mid' , zloc = 'min' )}} / # zloc = 'max' forces the xb to be drawn below 0.0. & VENT XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 0 , 10 , zloc = 'max' )}} / # Same as above, but formatted differntly. & VENT XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 0 , 10 , zloc = 'max' , fmt = \" %5.2f \" )}} / examples/filters/output/dxb/dxb.fds 1 2 3 4 5 6 7 8 9 10 11 # Centered at (0, 0, 0) by default & OBST XB = - 1.000 , 1.000 , - 2.000 , 2.000 , - 0.500 , 0.500 / # Only xmax and zmin are `0`, & OBST XB = - 2.000 , 0.000 , - 2.000 , 2.000 , 0.000 , 1.000 / # zloc = 'max' forces the xb to be drawn below 0.0. & VENT XB = - 1.000 , 1.000 , 0.000 , 0.000 , - 10.000 , 0.000 / # Same as above, but formatted differntly. & VENT XB =- 1.00 , 1.00 , 0.00 , 0.00 , - 10.00 , 0.00 / Exhaust/Supply \u00b6 For a &VENT, the sign of either VOLUME_FLOW or VELOCITY defined on the &SURF indicates if the vent is a supply or exhaust. These filters take the value specified and ensure the sign is correct. This makes the intent of the surface type clear to the reader. Note In this example, the exhaust and supply are both calculated as positive values, but the filters ensure the signs are correct for the respective types. examples/filters/exhaust.fds 1 2 3 4 5 { % set ex = 100_000 | convert ( 'cfm' , 'm^3/s' ) % } { % set sup = 0.95 * ex % } & SURF ID = 'EXHAUST' , VOLUME_FLOW = {{ ex | exhaust | round ( 1 ) }} / & SURF ID = 'SUPPLY' , VOLUME_FLOW = {{ sup | supply | round ( 1 ) }} / examples/filters/output/exhaust/exhaust.fds 1 2 & SURF ID = 'EXHAUST' , VOLUME_FLOW = 47.2 / & SURF ID = 'SUPPLY' , VOLUME_FLOW =- 44.8 / IJK \u00b6 The ijk filter will take an xb sextuplet along with a resolution to calculate the IJK values for a MESH. The way ijk converts a float to an integer can be controlled by passing in a rouding parameter. rounding='ceil' : Round the number up to the nearest integer. rounding='round' : Round the number to the nearest integer (default). rounding='floor' : Round the number down to the nearest integer. examples/filters/ijk.fds 1 2 3 4 { %+ set mesh = ( 0 , 5 , 0 , 4 , 0 , 3 ) +% } & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 , rounding = 'ceil' ) }} / & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 ) }} / & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 , rounding = 'floor' ) }} / examples/filters/output/ijk/ijk.fds 1 2 3 & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 17 , 14 , 10 / & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 17 , 13 , 10 / & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 16 , 13 , 10 / IOR \u00b6 For devices that measure surface properties, the user needs to tell FDS which way the device should point. The IOR property is defined as the direction from the target to the device. To ensure the direction is defined correctly, the ior filter takes the axis ( x , y , or z ) and either the direction from_target_to_device or from_device_to_target as + or - . In the example below, the first device is located in the -X direction from the obstruction. Therefore, target is along the x axis and the direction can be defined either as either: from_target_to_device=\"-\" (negative x direction) from_device_to_target=\"+\" (positive x direction) examples/filters/ior.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { % set xb = - 1.5 , 1.5 , - 1.5 , 1.5 , - 1.5 , 1.5 % } & MESH XB = {{ xb | xb }}, IJK = {{ xb | ijk ( 0.15 ) }} / & OBST XB = {{ ( - 0.9 , 0.9 , - 0.9 , 0.9 , - 0.9 , 0.9 ) | xb }} / { % set xyz = - 1 , 0 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 1 , 0 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , - 1 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 1 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 0 , - 1 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 0 , 1 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / examples/filters/output/ior/ior.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 & MESH XB = - 1.500 , 1.500 , - 1.500 , 1.500 , - 1.500 , 1.500 , IJK = 20 , 20 , 20 / & OBST XB = - 0.900 , 0.900 , - 0.900 , 0.900 , - 0.900 , 0.900 / & DEVC XYZ = - 1.000 , 0.000 , 0.000 , IOR =- 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = - 1.000 , 0.000 , 0.000 , IOR =- 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 1.000 , 0.000 , 0.000 , IOR = 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 1.000 , 0.000 , 0.000 , IOR = 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , - 1.000 , 0.000 , IOR =- 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , - 1.000 , 0.000 , IOR =- 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 1.000 , 0.000 , IOR = 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 1.000 , 0.000 , IOR = 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , - 1.000 , IOR =- 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , - 1.000 , IOR =- 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , 1.000 , IOR = 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , 1.000 , IOR = 3 , QUANTITY = 'INCIDENT HEAT FLUX' / Linspace \u00b6 Numpy's linspace() function will generate evenly spaced intervals between two values. This is useful when records, such as DEVCs, need to be evenly spaced between two bounds such as tenability devices across a large space or a thermocouple tree. examples/filters/linspace.fds 1 2 3 4 5 6 7 8 9 10 11 12 { % set start = 0 % } { % set stop = 10 % } { % for x in 5 | linspace ( start , stop ) % } & DEVC XYZ = {{ ( x , stop - x , 0 ) | xyz }}, .../ { % endfor % } { % set floor = 0 % } { % set ceiling = 10 | convert ( 'ft' , 'm' ) % } { % set buffer = 6 | convert ( 'in' , 'm' ) % } { % for z in 10 | linspace ( floor + buffer , ceiling - buffer ) % } & DEVC ID = \"TC_TREE_z{{ \" % .1 f \"|format(z) }} \" XYZ = {{ ( 0 , 0 , z ) | xyz }}, QUANTITY = 'THERMOCOUPLE' / { % endfor % } examples/filters/output/linspace/linspace.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 & DEVC XYZ = 0.000 , 10.000 , 0.000 , .../ & DEVC XYZ = 2.500 , 7.500 , 0.000 , .../ & DEVC XYZ = 5.000 , 5.000 , 0.000 , .../ & DEVC XYZ = 7.500 , 2.500 , 0.000 , .../ & DEVC XYZ = 10.000 , 0.000 , 0.000 , .../ & DEVC ID = \"TC_TREE_z0.2\" XYZ = 0.000 , 0.000 , 0.152 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z0.5\" XYZ = 0.000 , 0.000 , 0.457 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z0.8\" XYZ = 0.000 , 0.000 , 0.762 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.1\" XYZ = 0.000 , 0.000 , 1.067 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.4\" XYZ = 0.000 , 0.000 , 1.372 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.7\" XYZ = 0.000 , 0.000 , 1.676 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.0\" XYZ = 0.000 , 0.000 , 1.981 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.3\" XYZ = 0.000 , 0.000 , 2.286 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.6\" XYZ = 0.000 , 0.000 , 2.591 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.9\" XYZ = 0.000 , 0.000 , 2.896 , QUANTITY = 'THERMOCOUPLE' / Node \u00b6 The node filter is useful for creating PBS files. See Generating PBS Files for more information. t2 \u00b6 On a SURF, the TAU_Q parameter indicates the time at which the peak heat release rate is achieved. If a fire needs to be defined in terms of a standardized growth time (time to reach 1 MW), the t2 filter will calculate TAU_Q from the peak heat release rate and characteristic growth time. Altenatively, alpha ( \\(\\alpha\\) ) may be specified. \\[Q=1000*\\left(\\frac{t}{t_g}\\right)^2=\\alpha t^2\\] examples/filters/t2.fds 1 2 3 4 5 6 7 8 9 10 { % set hrr = 1250 % } { % set area = 1.5 % } & SURF ID = 'BURNER_TG' , HRRPUA = {{ ( hrr / area ) | round ( 1 ) }}, TAU_Q = {{ hrr | t2 ( tg = 300 ) | round ( 1 ) }} / & SURF ID = 'BURNER_ALPHA' , HRRPUA = {{ ( hrr / area ) | round ( 1 ) }}, TAU_Q = {{ hrr | t2 ( alpha = 0.01111 ) | round ( 1 ) }} / examples/filters/output/t2/t2.fds 1 2 3 4 5 6 7 & SURF ID = 'BURNER_TG' , HRRPUA = 833.3 , TAU_Q =- 335.4 / & SURF ID = 'BURNER_ALPHA' , HRRPUA = 833.3 , TAU_Q =- 335.4 / XB \u00b6 The xb filter takes a list of six numbers (x0, x1, y0, y1, z0, z1) and formats the numbers to have a consistent format. A custom format string can be provided. See Python's stringg formatting for more information. examples/filters/xb.fds 1 2 & OBST XB = {{ ( 0 , 5 , - 2 , 2 , 0 , 3 ) | xb }} / & OBST XB = {{ ( 0 , 5 , - 2 , 2 , 0 , 3 ) | xb ( \" %5.2f \" ) }} / examples/filters/output/xb/xb.fds 1 2 & OBST XB = 0.000 , 5.000 , - 2.000 , 2.000 , 0.000 , 3.000 / & OBST XB = 0.00 , 5.00 , - 2.00 , 2.00 , 0.00 , 3.00 / XYZ \u00b6 The xyz filter acts exactly the same as the xb filter, but takes a triplet rather than a sextuplet. examples/filters/xyz.fds 1 2 & DEVC XYZ = {{ ( 1 , 2 , 3 ) | xyz }}, .../ & DEVC XYZ = {{ ( 1 , 2 , 3 ) | xyz ( \" %5.2f \" ) }}, .../ examples/filters/output/xyz/xyz.fds 1 2 & DEVC XYZ = 1.000 , 2.000 , 3.000 , .../ & DEVC XYZ = 1.00 , 2.00 , 3.00 , .../ User Defined Filters \u00b6 Jinja Docs See the Jinja documentation for more information on custom filters Warning Custom functions that depend on packages that do not ship with xFDS might not work. If possible, stick to packages in the Python standard library . Additionally, Numpy and Pandas are included by default. Users who are familiar with Python may create their own custom filters as desired. If there is a file called filters.py in the same directory as the configuration file pbd.yml , xFDS will import every function in filters.py and make it available to the template in model.fds . See the user_filters test case as an example or checkout the xFDS custom filters source file . /path/to/project/ . \u251c\u2500\u2500 filters.py \u251c\u2500\u2500 model.fds \u251c\u2500\u2500 pbd.yml \u2514\u2500\u2500 units.txt","title":"Input Files"},{"location":"files/input/#defining-variables","text":"Jinja Docs See the Jinja documentation for more information on variables The ability to set and use variables is what makes xFDS so powerful. There are two ways to define variables for your model.","title":"Defining Variables"},{"location":"files/input/#using-jinjas-assignments","text":"Jinja allows you to assign values in the middle of your template. This can be useful when you want to use a value several times without having to type the value out each time. Variables also make it easy to keep things consistent. The variable may also be dynamic based on other inputs. The following example automatically calculates the HRRPUA parameter and XB bounds for a 1000 kW fire on a 1.5 m 2 burner. Note how: Line 9 : top is set so that the &VENT always sits on the top of the &OBST. Updating the variable will set the zmin and zmax for the &VENT as well as the zmax for the &OBST. Line 10 : area is defined in at the top, but the length of a side (for a square burner) is calculated in the template. Line 11 : r (radius) is defined to be half the length of a side. This helps define the XB so the burner is perfectly centered regardless of the area. Line 12 : HRRPUA is calculated based on the hrr and area variables defined. This way HRRPUA is always correct if either hrr or area are updated. Lines 13-14 : The XB parameters use r , top , and depth to ensure the burner is centered and that the &VENT always aligns with &OBST. examples/hrrpua/hrrpua.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / examples/hrrpua/output/hrrpua/hrrpua.fds 1 2 3 4 5 6 7 & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.000 , 0.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.200 , 0.200 , SURF_ID = 'BURNER' / Variables can be set multiple times If a variable needs to take on different values for different parts of the model, the variable can be assigned a new value. Note how top is redefined on line 16 and lines 17-18 are the same as lines 13-14. This will change the zmin and zmax values for the second burner. examples/hrrpua2/hrrpua2.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { % set hrr = 1000 -% } { % set area = 1.5 -% } { % set depth = 0.2 -% } & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / { % set top = 0.2 % } { % set side = area ** 0.5 % } { % set r = ( - side / 2 ) | round ( 4 ) % } & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = {{ ( hrr / area ) | round ( 2 ) }} / & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / { % set top = 1.2 % } & OBST XB = {{ ( - r , r , - r , r , top - depth , top ) | xb }} / & VENT XB = {{ ( - r , r , - r , r , top , top ) | xb }}, SURF_ID = 'BURNER' / examples/hrrpua2/output/hrrpua2/hrrpua2.fds 1 2 3 4 5 6 7 8 9 10 & MESH XB =- 2 , 2 , - 2 , 2 , 0 , 4 , IJK = 40 , 40 , 40 / & TIME T_END = 30 / & REAC FUEL = 'PROPANE' / & SURF ID = 'BURNER' , COLOR = 'RED' , HRRPUA = 666.67 / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.000 , 0.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 0.200 , 0.200 , SURF_ID = 'BURNER' / & OBST XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 1.000 , 1.200 / & VENT XB = 0.612 , - 0.612 , 0.612 , - 0.612 , 1.200 , 1.200 , SURF_ID = 'BURNER' /","title":"Using Jinja's Assignments"},{"location":"files/input/#in-the-configuration-file","text":"When generating multiple output files from a single fds input file, a configuration file should be used. See Configuration for more details.","title":"In the Configuration File"},{"location":"files/input/#control-structures","text":"","title":"Control Structures"},{"location":"files/input/#if-statements","text":"Jinja Docs See the Jinja documentation for more information on if statements . To make FDS records optional, use an if statement. The expression following the if keyword must evaluate to True or False . See this Real Python article for more information on how Python evaluates \"truthiness\". In the example below, a varibale is defined for opening the mesh boundaries vs leaving them closed (default in FDS). Note how the only difference between the two files are the value of bounds on line 1. When the bounds are closed , the &VENT lines are omitted from the output file. Open Bounds examples/bounds_open/bounds_open.fds 1 2 3 4 5 6 7 8 9 10 { % set bounds = \"open\" -% } & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / { % if bounds == \"open\" % } & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / { % endif % } examples/bounds_open/output/bounds_open/bounds_open.fds 1 2 3 4 5 6 & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / Closed Bounds examples/bounds_closed/bounds_closed.fds 1 2 3 4 5 6 7 8 9 10 { % set bounds = closed -% } & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / { % if bounds == \"open\" % } & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & VENT MB = 'YMIN' , SURF_ID = 'OPEN' / & VENT MB = 'YMAX' , SURF_ID = 'OPEN' / { % endif % } examples/bounds_closed/output/bounds_closed/bounds_closed.fds 1 & MESH XB = 0 , 1 , 0 , 1 , 0 , 1 , IJK = 10 , 10 , 10 / If the model requires mutally exclusive options, if / elif / else blocks can be used. { % if ventillation == \"natural\" % } # open doors and windows { % elif ventillation == \"mechanical\" % } # insert fans { % else % } # room is sealed { % endif % }","title":"If Statements"},{"location":"files/input/#for-loops","text":"Jinja Docs See the Jinja documentation for more information on for loops Sometimes it is beneficial to iterate through a list or quickly generate an array of items. While some FDS records can be duplicated with a &MULT record, this is not always the case. Imagine needing to quickly layout a grid of sprinklers, and the sprinklers need to have unique names (e.g. for developing &CTRL records). Devices do not support &MULT records. For loops can assist in generating the sprinkler grid while calculating the position for each sprinkler individually. By defining the number of sprinklers in each direction ( nx , ny ) and the sprinkler spacing , the location of the sprinklers are determined. The linspace filter will create nx sprinklers evenly spaced between -dx / 2 and dx / 2 and simlar for the y direction. examples/sprinkler_loop/sprinkler_loop.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { % set nx = 6 % } { % set ny = 4 % } { % set offset = 0.3048 % } { % set spacing = 2.438 % } { % set dx = spacing * ( nx - 1 ) % } { % set dy = spacing * ( ny - 1 ) % } { % set zmax = 3 % } { % set res = 0.2 % } { % set mesh = - dx / 2 , dx / 2 , - dy / 2 , dy / 2 , 0 , zmax -% } & MESH XB = {{ mesh | xb }}, IJK = {{ mesh | ijk ( res ) }} & PROP ID = 'Link' , QUANTITY = 'SPRINKLER LINK TEMPERATURE' , ACTIVATION_TEMPERATURE = 74 / { % for x in nx | linspace ( - dx / 2 , dx / 2 ) % } { % set i = loop . index % } { % for y in ny | linspace ( - dy / 2 , dy / 2 ) % } { % set j = loop . index % } & DEVC ID = 'SPR_{{i}}_{{j}}' , XYZ = {{ ( x , y , zmax - offset ) | xyz }}, PROP_ID = 'Link' / { % endfor % } { % endfor % } & OBST XB = {{ ( - 0.5 , 0.5 , - 0.5 , 0.5 , 0.0 , 0.1 ) | xb }}, COLOR = 'RED' / Tip When looping, it might be useful to know what loop iteration is being processed. The loop index can be accessed by {{ loop.index }} . This is used to set i and j for the device naming scheme above. Note how each sprinkler has a unique ID and the &MESH will adjust based on the number of sprinklers. Additionally, the &OBST representing the burner is perfectly centered between the 4 central sprinklers! examples/sprinkler_loop/output/sprinkler_loop/sprinkler_loop.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 & MESH XB = - 6.095 , 6.095 , - 3.657 , 3.657 , 0.000 , 3.000 , IJK = 61 , 37 , 15 & PROP ID = 'Link' , QUANTITY = 'SPRINKLER LINK TEMPERATURE' , ACTIVATION_TEMPERATURE = 74 / & DEVC ID = 'SPR_1_1' , XYZ = - 6.095 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_2' , XYZ = - 6.095 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_3' , XYZ = - 6.095 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_1_4' , XYZ = - 6.095 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_1' , XYZ = - 3.657 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_2' , XYZ = - 3.657 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_3' , XYZ = - 3.657 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_2_4' , XYZ = - 3.657 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_1' , XYZ = - 1.219 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_2' , XYZ = - 1.219 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_3' , XYZ = - 1.219 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_3_4' , XYZ = - 1.219 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_1' , XYZ = 1.219 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_2' , XYZ = 1.219 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_3' , XYZ = 1.219 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_4_4' , XYZ = 1.219 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_1' , XYZ = 3.657 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_2' , XYZ = 3.657 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_3' , XYZ = 3.657 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_5_4' , XYZ = 3.657 , 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_1' , XYZ = 6.095 , - 3.657 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_2' , XYZ = 6.095 , - 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_3' , XYZ = 6.095 , 1.219 , 2.695 , PROP_ID = 'Link' / & DEVC ID = 'SPR_6_4' , XYZ = 6.095 , 3.657 , 2.695 , PROP_ID = 'Link' / & OBST XB = - 0.500 , 0.500 , - 0.500 , 0.500 , 0.000 , 0.100 , COLOR = 'RED' /","title":"For Loops"},{"location":"files/input/#macros","text":"Jinja Docs See the Jinja documentation for more information on macros Macros are useful when defining complex elements that require multiple lines of FDS code or simple elements that are reused multiple times. For example, defining a simple leakage path through a door requires at least three different FDS records, two &VENTs and one &HVAC. It may be beneficial to include an &OBST record to ensure the &VENT records are applied to a solid surface. The example below creates doors along a wall in a corridor. A macro is defined on line 11 that takes in four parameters: the x position of the door, width and height of the door, and the leakage area. (The y position is fixed along the wall). The macro will determine the extends of the XB parameters and use a consistent naming scheme to tie the elements together. Tip Macros can be called by passing in a list of values, or by specifying the parameter and value. Both options work the same, but specifying the parameter and value will make the file more readable. 38 {{ door ( 1.0 , 1.0 , 2.0 , 0.3 ) }} 41 {{ door ( x = 3.0 , width = 2.0 , height = 2.0 , leak_area = 0.6 ) }} Additionally, tenability devices are placed at 1 meter intervals along the corridor. A macro is defined on line 19 to ensure all the tenability criteria are defined at each location (visibility, temperature, O 2 , CO 2 , CO). The macro takes the x and y positions and will place all five devices at that location (the z position is hard coded in this example). A for loop (line 44) is used to set the 1 meter spacing starting at x = 1 m until the end of the corridor is reached. examples/leaks/leaks.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { % set x0 = 0 -% } { % set x1 = 6 -% } { % set y0 = 0 -% } { % set y1 = 3 -% } { % set z0 = 0 -% } { % set z1 = 3 -% } { % set res = 0.1 -% } { % set ns = namespace ( door_id = 0 , devc_loc = 0 ) -% } { % macro door ( x , width , height , leak_area ) -% } { % set ns . door_id = ns . door_id + 1 % } & OBST ID = 'Door_{{ ns.door_id }}' , XB = {{ ( x , x + width , 2.0 , 2.2 , 0.0 , height ) | xb }} / & VENT ID = 'Door_{{ ns.door_id }}_i' , XB = {{ ( x , x + width , 2.0 , 2.0 , 0.0 , height ) | xb }}, SURF_ID = 'LEAK' / & VENT ID = 'Door_{{ ns.door_id }}_o' , XB = {{ ( x , x + width , 2.2 , 2.2 , 0.0 , height ) | xb }}, SURF_ID = 'LEAK' / & HVAC ID = 'Door_{{ ns.door_id }}_l' , VENT_ID = 'Door_{{ ns.door_id }}_i' , VENT2_ID = 'Door_{{ ns.door_id }}_o' , AREA = {{ leak_area }}, TYPE_ID = 'LEAK' / { %- endmacro -% } { % macro tenability ( x , y ) -% } { % set ns . devc_loc = ns . devc_loc + 1 % } & DEVC ID = 'VIS_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_{{ ns.devc_loc }}' , XYZ = {{ ( x , y , 1.8 ) | xyz }}, QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / { %- endmacro -% } # Corridor with open ends and wall on one side { % set mesh = x0 , x1 , y0 , y1 , z0 , z1 % } & MESH XB = {{ mesh | xb }}, IJK = {{ mesh | ijk ( res ) }} / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & OBST XB = {{ ( x0 , x1 , 2.0 , 2.2 , z0 , z1 ) | xb }} / & SURF ID = 'LEAK' , COLOR = 'FIREBRICK' / # Single Door {{ door ( 1.0 , 1.0 , 2.0 , 0.3 ) }} # Double Door {{ door ( x = 3.0 , width = 2.0 , height = 2.0 , leak_area = 0.6 ) }} # Tenability Devices { % for x in range ( 1 , x1 ) % } {{ tenability ( x , 1.0 )}} { % endfor % } examples/leaks/output/leaks/leaks.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # Corridor with open ends and wall on one side & MESH XB = 0.000 , 6.000 , 0.000 , 3.000 , 0.000 , 3.000 , IJK = 60 , 30 , 30 / & VENT MB = 'XMIN' , SURF_ID = 'OPEN' / & VENT MB = 'XMAX' , SURF_ID = 'OPEN' / & OBST XB = 0.000 , 6.000 , 2.000 , 2.200 , 0.000 , 3.000 / & SURF ID = 'LEAK' , COLOR = 'FIREBRICK' / # Single Door & OBST ID = 'Door_1' , XB = 1.000 , 2.000 , 2.000 , 2.200 , 0.000 , 2.000 / & VENT ID = 'Door_1_i' , XB = 1.000 , 2.000 , 2.000 , 2.000 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & VENT ID = 'Door_1_o' , XB = 1.000 , 2.000 , 2.200 , 2.200 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & HVAC ID = 'Door_1_l' , VENT_ID = 'Door_1_i' , VENT2_ID = 'Door_1_o' , AREA = 0.3 , TYPE_ID = 'LEAK' / # Double Door & OBST ID = 'Door_2' , XB = 3.000 , 5.000 , 2.000 , 2.200 , 0.000 , 2.000 / & VENT ID = 'Door_2_i' , XB = 3.000 , 5.000 , 2.000 , 2.000 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & VENT ID = 'Door_2_o' , XB = 3.000 , 5.000 , 2.200 , 2.200 , 0.000 , 2.000 , SURF_ID = 'LEAK' / & HVAC ID = 'Door_2_l' , VENT_ID = 'Door_2_i' , VENT2_ID = 'Door_2_o' , AREA = 0.6 , TYPE_ID = 'LEAK' / # Tenability Devices & DEVC ID = 'VIS_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_1' , XYZ = 1.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_2' , XYZ = 2.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_3' , XYZ = 3.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_4' , XYZ = 4.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / & DEVC ID = 'VIS_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VISIBILITY' / & DEVC ID = 'TMP_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'TEMPERATURE' / & DEVC ID = 'OXY_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'OXYGEN' / & DEVC ID = 'CO2_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON DIOXIDE' / & DEVC ID = 'CMO_5' , XYZ = 5.000 , 1.000 , 1.800 , QUANTITY = 'VOLUME FRACTION' , SPEC_ID = 'CARBON MONOXIDE' / Tip Use namespace to set up a counter that can be incremented to ensure unique IDs. Counters are initialized on line 9 as follows: 9 { % set ns = namespace ( door_id = 0 , devc_loc = 0 ) -% } The following lines are located at the top of the respective macros and will increment the number by 1 every time the macro is called. 12 { % set ns . door_id = ns . door_id + 1 % } 20 { % set ns . devc_loc = ns . devc_loc + 1 % }","title":"Macros"},{"location":"files/input/#filters","text":"","title":"Filters"},{"location":"files/input/#jinja-filters","text":"Jinja Docs See the Jinja documentation for more information on filters . Filters can modify the value of a variable or expression. This is useful when you need to ensure values follow a certain format or if a value needs to be modified. The examples below demonstrate how to use some of the built-in filters provided by Jinja.","title":"Jinja Filters"},{"location":"files/input/#absolute-value","text":"examples/filters/abs.fds 1 {{ - 42 | abs }} examples/filters/output/filters/abs.fds 1 42","title":"Absolute Value"},{"location":"files/input/#center-text","text":"examples/filters/center.fds 1 \"{{ \" xFDS \"|center(10) }}\" examples/filters/output/filters/center.fds 1 \" xFDS \"","title":"Center Text"},{"location":"files/input/#convert-to-float","text":"Tip In addition to the float filter, this example uses python's printf-style formatting along with the format filter to control the number of decimals displayed. %7.4f\"|format(x) tells xFDS how to format the value of x . %f : format as a float %.3f : format as a float to 3 decimals %8.3f : format as float to 3 decimals and a fixed width of 8 characters (includes decimal ' . ', sign ' - ', and extra white space at the beginning) examples/filters/float.fds 1 2 3 4 {{ 42 | float }} {{ \" %f \" | format ( 42 )}} {{ \" %.3f \" | format ( 42 )}} \"{{ \" % 8.3 f \"|format(-42) }} \" examples/filters/output/float/float.fds 1 2 3 4 42.0 42.000000 42.000 \" -42.000\"","title":"Convert to Float"},{"location":"files/input/#convert-to-integer","text":"examples/filters/int.fds 1 2 {{ 42.0 | int }} {{ \" %d \" | format ( 42.0 )}} examples/filters/output/int/int.fds 1 2 42 42","title":"Convert to integer"},{"location":"files/input/#maximum-value","text":"examples/filters/max.fds 1 {{ [ 1 , 2 , 3 ] | max }} examples/filters/output/max/max.fds 1 3","title":"Maximum Value"},{"location":"files/input/#minimum-value","text":"examples/filters/min.fds 1 {{ [ 1 , 2 , 3 ] | min }} examples/filters/output/min/min.fds 1 1","title":"Minimum Value"},{"location":"files/input/#round-value","text":"examples/filters/round.fds 1 {{ 3.14159 | round ( 3 )}} examples/filters/output/round/round.fds 1 3.142","title":"Round Value"},{"location":"files/input/#trim-text","text":"examples/filters/trim.fds 1 \"{{ ' xFDS '|trim }}\" examples/filters/output/trim/trim.fds 1 \"xFDS\"","title":"Trim Text"},{"location":"files/input/#filter-unique-values","text":"examples/filters/unique.fds 1 2 # unique {{ [ 1 , 1 , 2 , 2 ] | unique | list }} examples/filters/output/unique/unique.fds 1 2 # unique [ 1 , 2 ]","title":"Filter Unique Values"},{"location":"files/input/#text-to-uppercase","text":"examples/filters/upper.fds 1 {{ 'pbd tools' | upper }} examples/filters/output/upper/upper.fds 1 PBD TOOLS","title":"Text to Uppercase"},{"location":"files/input/#xfds-custom-filters","text":"In addition to the built-in filters that comes with Jinja, xFDS ships with some additional filters useful for creating FDS records.","title":"xFDS Custom Filters"},{"location":"files/input/#arange","text":"To create evenly spaced items, Python's range() function could be used, but it requires integer values for its parameters. Numpy's arange() function allows floats to be used. xFDS defines this as a filter for convience. examples/filters/arange.fds 1 2 3 4 5 6 7 8 { % for x in 0.25 | arange ( 1.5 , 2.5 ) % } & DEVC XYZ = {{ ( x , 0 , 0 ) | xyz }}, .../ { % endfor % } { # This would cause an error for x in range ( 1.5 , 2.5 , 0.25 ) #} examples/filters/output/arange/arange.fds 1 2 3 4 & DEVC XYZ = 1.500 , 0.000 , 0.000 , .../ & DEVC XYZ = 1.750 , 0.000 , 0.000 , .../ & DEVC XYZ = 2.000 , 0.000 , 0.000 , .../ & DEVC XYZ = 2.250 , 0.000 , 0.000 , .../","title":"ARange"},{"location":"files/input/#convert","text":"Thanks to the magic of pint , xFDS will allow you to convert between units. You can define values in the config file with the desired units (determined by you) while ensuring that the correct units are passed to FDS. The convert will return a float type which could be used in further calculations. If the conversion will be part of the final output, the formatting can be controlled by using the format and convert filters together. Alternatively, str_convert can be used to improve readability. Info List of supported units defined by pint. List of custom units defined by xFDS. Pint allows custom units to be defined. xFDS will detect a file called units.txt located in the same directory as the configuration file. Here is a simple definition of a smoot . examples/filters/units.txt 1 smoot = 1.702 * meter examples/filters/convert.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {{ 212 | convert ( 'degF' , 'degC' ) }} {{ 212 | str_convert ( 'degF' , 'degC' , ' %.0f ' ) }} {{ ' %.0f ' | format ( 212 | convert ( 'degF' , 'degC' )) }} {{ 6 | convert ( 'ft' , 'm' )}} {{ 6 | str_convert ( 'ft' , 'm' , ' %.3f ' )}} {{ 100_000 | convert ( 'ft^3/min' , 'm^3/s' )}} {{ 100_000 | convert ( 'cfm' , 'm^3/s' )}} {{ 100_000 | str_convert ( 'cfm' , 'm^3/s' , ' %.2f ' )}} {{ 1_000 | convert ( 'BTU/s' , 'kW' )}} {{ 1 | convert ( 'smoot' , 'm' )}} {{ 1 | convert ( 'smoot' , 'ft' )}} {{ 1 | str_convert ( 'smoot' , 'ft' , ' %.3f ' )}} examples/filters/output/convert/convert.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 100.00000000000006 100 100 1.8287999999999998 1.829 47.19474431999999 47.19474431999999 47.19 1055.056 1.702 5.583989501312336 5.584","title":"Convert"},{"location":"files/input/#dxb","text":"Similar to the xb filter below, dxb takes a triplet representing the anchor point (x, y, z) and parameters to set the width, depth, and height respectfully. Specify xloc , yloc , or zloc as min , max , or mid to indicate how the anchor point should be treated. dxb also accepts a format string. examples/filters/dxb.fds 1 2 3 4 5 6 7 8 9 10 11 # Centered at (0, 0, 0) by default & OBST XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 4 , 1 )}} / # Only xmax and zmin are `0`, & OBST XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 4 , 1 , xloc = 'max' , yloc = 'mid' , zloc = 'min' )}} / # zloc = 'max' forces the xb to be drawn below 0.0. & VENT XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 0 , 10 , zloc = 'max' )}} / # Same as above, but formatted differntly. & VENT XB = {{ ( 0 , 0 , 0 ) | dxb ( 2 , 0 , 10 , zloc = 'max' , fmt = \" %5.2f \" )}} / examples/filters/output/dxb/dxb.fds 1 2 3 4 5 6 7 8 9 10 11 # Centered at (0, 0, 0) by default & OBST XB = - 1.000 , 1.000 , - 2.000 , 2.000 , - 0.500 , 0.500 / # Only xmax and zmin are `0`, & OBST XB = - 2.000 , 0.000 , - 2.000 , 2.000 , 0.000 , 1.000 / # zloc = 'max' forces the xb to be drawn below 0.0. & VENT XB = - 1.000 , 1.000 , 0.000 , 0.000 , - 10.000 , 0.000 / # Same as above, but formatted differntly. & VENT XB =- 1.00 , 1.00 , 0.00 , 0.00 , - 10.00 , 0.00 /","title":"DXB"},{"location":"files/input/#exhaustsupply","text":"For a &VENT, the sign of either VOLUME_FLOW or VELOCITY defined on the &SURF indicates if the vent is a supply or exhaust. These filters take the value specified and ensure the sign is correct. This makes the intent of the surface type clear to the reader. Note In this example, the exhaust and supply are both calculated as positive values, but the filters ensure the signs are correct for the respective types. examples/filters/exhaust.fds 1 2 3 4 5 { % set ex = 100_000 | convert ( 'cfm' , 'm^3/s' ) % } { % set sup = 0.95 * ex % } & SURF ID = 'EXHAUST' , VOLUME_FLOW = {{ ex | exhaust | round ( 1 ) }} / & SURF ID = 'SUPPLY' , VOLUME_FLOW = {{ sup | supply | round ( 1 ) }} / examples/filters/output/exhaust/exhaust.fds 1 2 & SURF ID = 'EXHAUST' , VOLUME_FLOW = 47.2 / & SURF ID = 'SUPPLY' , VOLUME_FLOW =- 44.8 /","title":"Exhaust/Supply"},{"location":"files/input/#ijk","text":"The ijk filter will take an xb sextuplet along with a resolution to calculate the IJK values for a MESH. The way ijk converts a float to an integer can be controlled by passing in a rouding parameter. rounding='ceil' : Round the number up to the nearest integer. rounding='round' : Round the number to the nearest integer (default). rounding='floor' : Round the number down to the nearest integer. examples/filters/ijk.fds 1 2 3 4 { %+ set mesh = ( 0 , 5 , 0 , 4 , 0 , 3 ) +% } & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 , rounding = 'ceil' ) }} / & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 ) }} / & MESH XB = {{ mesh | xb ( \" %5.2f \" ) }}, IJK = {{ mesh | ijk ( 0.3 , rounding = 'floor' ) }} / examples/filters/output/ijk/ijk.fds 1 2 3 & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 17 , 14 , 10 / & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 17 , 13 , 10 / & MESH XB = 0.00 , 5.00 , 0.00 , 4.00 , 0.00 , 3.00 , IJK = 16 , 13 , 10 /","title":"IJK"},{"location":"files/input/#ior","text":"For devices that measure surface properties, the user needs to tell FDS which way the device should point. The IOR property is defined as the direction from the target to the device. To ensure the direction is defined correctly, the ior filter takes the axis ( x , y , or z ) and either the direction from_target_to_device or from_device_to_target as + or - . In the example below, the first device is located in the -X direction from the obstruction. Therefore, target is along the x axis and the direction can be defined either as either: from_target_to_device=\"-\" (negative x direction) from_device_to_target=\"+\" (positive x direction) examples/filters/ior.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { % set xb = - 1.5 , 1.5 , - 1.5 , 1.5 , - 1.5 , 1.5 % } & MESH XB = {{ xb | xb }}, IJK = {{ xb | ijk ( 0.15 ) }} / & OBST XB = {{ ( - 0.9 , 0.9 , - 0.9 , 0.9 , - 0.9 , 0.9 ) | xb }} / { % set xyz = - 1 , 0 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 1 , 0 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'x' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , - 1 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 1 , 0 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'y' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 0 , - 1 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_target_to_device = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_device_to_target = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / { % set xyz = 0 , 0 , 1 % } & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_target_to_device = \"+\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = {{ xyz | xyz }}, IOR = {{ 'z' | ior ( from_device_to_target = \"-\" ) }}, QUANTITY = 'INCIDENT HEAT FLUX' / examples/filters/output/ior/ior.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 & MESH XB = - 1.500 , 1.500 , - 1.500 , 1.500 , - 1.500 , 1.500 , IJK = 20 , 20 , 20 / & OBST XB = - 0.900 , 0.900 , - 0.900 , 0.900 , - 0.900 , 0.900 / & DEVC XYZ = - 1.000 , 0.000 , 0.000 , IOR =- 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = - 1.000 , 0.000 , 0.000 , IOR =- 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 1.000 , 0.000 , 0.000 , IOR = 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 1.000 , 0.000 , 0.000 , IOR = 1 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , - 1.000 , 0.000 , IOR =- 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , - 1.000 , 0.000 , IOR =- 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 1.000 , 0.000 , IOR = 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 1.000 , 0.000 , IOR = 2 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , - 1.000 , IOR =- 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , - 1.000 , IOR =- 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , 1.000 , IOR = 3 , QUANTITY = 'INCIDENT HEAT FLUX' / & DEVC XYZ = 0.000 , 0.000 , 1.000 , IOR = 3 , QUANTITY = 'INCIDENT HEAT FLUX' /","title":"IOR"},{"location":"files/input/#linspace","text":"Numpy's linspace() function will generate evenly spaced intervals between two values. This is useful when records, such as DEVCs, need to be evenly spaced between two bounds such as tenability devices across a large space or a thermocouple tree. examples/filters/linspace.fds 1 2 3 4 5 6 7 8 9 10 11 12 { % set start = 0 % } { % set stop = 10 % } { % for x in 5 | linspace ( start , stop ) % } & DEVC XYZ = {{ ( x , stop - x , 0 ) | xyz }}, .../ { % endfor % } { % set floor = 0 % } { % set ceiling = 10 | convert ( 'ft' , 'm' ) % } { % set buffer = 6 | convert ( 'in' , 'm' ) % } { % for z in 10 | linspace ( floor + buffer , ceiling - buffer ) % } & DEVC ID = \"TC_TREE_z{{ \" % .1 f \"|format(z) }} \" XYZ = {{ ( 0 , 0 , z ) | xyz }}, QUANTITY = 'THERMOCOUPLE' / { % endfor % } examples/filters/output/linspace/linspace.fds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 & DEVC XYZ = 0.000 , 10.000 , 0.000 , .../ & DEVC XYZ = 2.500 , 7.500 , 0.000 , .../ & DEVC XYZ = 5.000 , 5.000 , 0.000 , .../ & DEVC XYZ = 7.500 , 2.500 , 0.000 , .../ & DEVC XYZ = 10.000 , 0.000 , 0.000 , .../ & DEVC ID = \"TC_TREE_z0.2\" XYZ = 0.000 , 0.000 , 0.152 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z0.5\" XYZ = 0.000 , 0.000 , 0.457 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z0.8\" XYZ = 0.000 , 0.000 , 0.762 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.1\" XYZ = 0.000 , 0.000 , 1.067 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.4\" XYZ = 0.000 , 0.000 , 1.372 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z1.7\" XYZ = 0.000 , 0.000 , 1.676 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.0\" XYZ = 0.000 , 0.000 , 1.981 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.3\" XYZ = 0.000 , 0.000 , 2.286 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.6\" XYZ = 0.000 , 0.000 , 2.591 , QUANTITY = 'THERMOCOUPLE' / & DEVC ID = \"TC_TREE_z2.9\" XYZ = 0.000 , 0.000 , 2.896 , QUANTITY = 'THERMOCOUPLE' /","title":"Linspace"},{"location":"files/input/#node","text":"The node filter is useful for creating PBS files. See Generating PBS Files for more information.","title":"Node"},{"location":"files/input/#t2","text":"On a SURF, the TAU_Q parameter indicates the time at which the peak heat release rate is achieved. If a fire needs to be defined in terms of a standardized growth time (time to reach 1 MW), the t2 filter will calculate TAU_Q from the peak heat release rate and characteristic growth time. Altenatively, alpha ( \\(\\alpha\\) ) may be specified. \\[Q=1000*\\left(\\frac{t}{t_g}\\right)^2=\\alpha t^2\\] examples/filters/t2.fds 1 2 3 4 5 6 7 8 9 10 { % set hrr = 1250 % } { % set area = 1.5 % } & SURF ID = 'BURNER_TG' , HRRPUA = {{ ( hrr / area ) | round ( 1 ) }}, TAU_Q = {{ hrr | t2 ( tg = 300 ) | round ( 1 ) }} / & SURF ID = 'BURNER_ALPHA' , HRRPUA = {{ ( hrr / area ) | round ( 1 ) }}, TAU_Q = {{ hrr | t2 ( alpha = 0.01111 ) | round ( 1 ) }} / examples/filters/output/t2/t2.fds 1 2 3 4 5 6 7 & SURF ID = 'BURNER_TG' , HRRPUA = 833.3 , TAU_Q =- 335.4 / & SURF ID = 'BURNER_ALPHA' , HRRPUA = 833.3 , TAU_Q =- 335.4 /","title":"t2"},{"location":"files/input/#xb","text":"The xb filter takes a list of six numbers (x0, x1, y0, y1, z0, z1) and formats the numbers to have a consistent format. A custom format string can be provided. See Python's stringg formatting for more information. examples/filters/xb.fds 1 2 & OBST XB = {{ ( 0 , 5 , - 2 , 2 , 0 , 3 ) | xb }} / & OBST XB = {{ ( 0 , 5 , - 2 , 2 , 0 , 3 ) | xb ( \" %5.2f \" ) }} / examples/filters/output/xb/xb.fds 1 2 & OBST XB = 0.000 , 5.000 , - 2.000 , 2.000 , 0.000 , 3.000 / & OBST XB = 0.00 , 5.00 , - 2.00 , 2.00 , 0.00 , 3.00 /","title":"XB"},{"location":"files/input/#xyz","text":"The xyz filter acts exactly the same as the xb filter, but takes a triplet rather than a sextuplet. examples/filters/xyz.fds 1 2 & DEVC XYZ = {{ ( 1 , 2 , 3 ) | xyz }}, .../ & DEVC XYZ = {{ ( 1 , 2 , 3 ) | xyz ( \" %5.2f \" ) }}, .../ examples/filters/output/xyz/xyz.fds 1 2 & DEVC XYZ = 1.000 , 2.000 , 3.000 , .../ & DEVC XYZ = 1.00 , 2.00 , 3.00 , .../","title":"XYZ"},{"location":"files/input/#user-defined-filters","text":"Jinja Docs See the Jinja documentation for more information on custom filters Warning Custom functions that depend on packages that do not ship with xFDS might not work. If possible, stick to packages in the Python standard library . Additionally, Numpy and Pandas are included by default. Users who are familiar with Python may create their own custom filters as desired. If there is a file called filters.py in the same directory as the configuration file pbd.yml , xFDS will import every function in filters.py and make it available to the template in model.fds . See the user_filters test case as an example or checkout the xFDS custom filters source file . /path/to/project/ . \u251c\u2500\u2500 filters.py \u251c\u2500\u2500 model.fds \u251c\u2500\u2500 pbd.yml \u2514\u2500\u2500 units.txt","title":"User Defined Filters"},{"location":"topics/cfast/","text":"Despite its name, xFDS can render any text file as a template. It can handle CFAST files just as easily as FDS or PBS files. Defining a fire in the CFAST editor can be tedious, especially if the area or product yields need to be altered over time. With xFDS, these parameters can be programatically set. The example below shows how the fire can easily be changed from a medium growth (tg = 300 s) to a slow growth (tg = 600 s) fire. Tip If a project requires both CFAST and FDS models, they can be managed from the same pbd.yml configuration file! examples/cfast/pbd.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 xfds : render : - name : t2 - fire_tg - {{ tg }} s files : - cfast . in variables : qmax : 1000 tmax : 800 # Compartment dimensions dx : 20 # ft dy : 15 # ft dz : 8 # ft # Vent Dimensions H_v : 7 # ft W_v : 3 # ft offset : 5 # ft parameters : tg : [ 300 , 600 ] examples/cfast/cfast.in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 & HEAD VERSION = 7700 , TITLE = 'CFAST Simulation' / !! Scenario Configuration & TIME SIMULATION = {{ tmax }} PRINT = 60 SMOKEVIEW = 15 SPREADSHEET = 15 / & INIT PRESSURE = 101325 RELATIVE_HUMIDITY = 50 INTERIOR_TEMPERATURE = 20 EXTERIOR_TEMPERATURE = 20 / !! Compartments & COMP ID = 'Comp 1' DEPTH = {{ dx | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} HEIGHT = {{ dz | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} WIDTH = {{ dy | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} ORIGIN = 0 , 0 , 0 GRID = 50 , 50 , 50 / !! Wall Vents & VENT TYPE = 'WALL' ID = 'WallVent_1' COMP_IDS = 'Comp 1' 'OUTSIDE' , BOTTOM = 0 HEIGHT = {{ H_v | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} WIDTH = {{ W_v | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} FACE = 'FRONT' OFFSET = {{ offset | str_convert ( 'ft' , 'm' , ' %.4f ' ) }} / !! Fires & FIRE ID = 'New Fire 1' COMP_ID = '' , FIRE_ID = 'New Fire 1' LOCATION = 0 , 0 / & CHEM ID = 'New Fire 1' CARBON = 1 CHLORINE = 0 HYDROGEN = 4 NITROGEN = 0 OXYGEN = 0 HEAT_OF_COMBUSTION = 50000 RADIATIVE_FRACTION = 0.35 / & TABL ID = 'New Fire 1' LABELS = 'TIME' , 'HRR' , 'HEIGHT' , 'AREA' , 'CO_YIELD' , 'SOOT_YIELD' , 'HCN_YIELD' , 'HCL_YIELD' , 'TRACE_YIELD' / !! Growth Phase { % for t in 15 | arange ( 0 , tg ) % } & TABL ID = 'New Fire 1' , DATA = {{ \" %3d \" | format ( t ) }}, {{ \" %6.1f \" | format ( t | hrr ( tg )) }}, 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / { % endfor % } !! Steady State Phase & TABL ID = 'New Fire 1' , DATA = {{ tg }}, {{ \" %6.1f \" | format ( tg | hrr ( tg )) }}, 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = {{ tmax }}, {{ \" %6.1f \" | format (( tmax - 1 ) | hrr ( tg )) }}, 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = {{ tmax + 1 }}, {{ \" %6.1f \" | format ( 0 ) }}, 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TAIL / Note This model uses a custom filter to get the heat release rate as a function of time examples/cfast/filters.py 1 2 3 4 5 6 def hrr ( t : int , tg : int ) -> float : \"\"\"Get the heat release rate at time t following a t-squared growth curve.\"\"\" if t < tg : return 1000.0 * ( t / tg ) ** 2 else : return 1000.0 examples/cfast/output/t2-fire_tg-300s/t2-fire_tg-300s.in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 & HEAD VERSION = 7700 , TITLE = 'CFAST Simulation' / !! Scenario Configuration & TIME SIMULATION = 800 PRINT = 60 SMOKEVIEW = 15 SPREADSHEET = 15 / & INIT PRESSURE = 101325 RELATIVE_HUMIDITY = 50 INTERIOR_TEMPERATURE = 20 EXTERIOR_TEMPERATURE = 20 / !! Compartments & COMP ID = 'Comp 1' DEPTH = 6.0960 HEIGHT = 2.4384 WIDTH = 4.5720 ORIGIN = 0 , 0 , 0 GRID = 50 , 50 , 50 / !! Wall Vents & VENT TYPE = 'WALL' ID = 'WallVent_1' COMP_IDS = 'Comp 1' 'OUTSIDE' , BOTTOM = 0 HEIGHT = 2.1336 WIDTH = 0.9144 FACE = 'FRONT' OFFSET = 1.5240 / !! Fires & FIRE ID = 'New Fire 1' COMP_ID = '' , FIRE_ID = 'New Fire 1' LOCATION = 0 , 0 / & CHEM ID = 'New Fire 1' CARBON = 1 CHLORINE = 0 HYDROGEN = 4 NITROGEN = 0 OXYGEN = 0 HEAT_OF_COMBUSTION = 50000 RADIATIVE_FRACTION = 0.35 / & TABL ID = 'New Fire 1' LABELS = 'TIME' , 'HRR' , 'HEIGHT' , 'AREA' , 'CO_YIELD' , 'SOOT_YIELD' , 'HCN_YIELD' , 'HCL_YIELD' , 'TRACE_YIELD' / !! Growth Phase & TABL ID = 'New Fire 1' , DATA = 0 , 0.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 15 , 2.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 30 , 10.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 45 , 22.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 60 , 40.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 75 , 62.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 90 , 90.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 105 , 122.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 120 , 160.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 135 , 202.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 150 , 250.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 165 , 302.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 180 , 360.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 195 , 422.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 210 , 490.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 225 , 562.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 240 , 640.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 255 , 722.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 270 , 810.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 285 , 902.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / !! Steady State Phase & TABL ID = 'New Fire 1' , DATA = 300 , 1000.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 800 , 1000.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 801 , 0.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TAIL / examples/cfast/output/t2-fire_tg-600s/t2-fire_tg-600s.in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 & HEAD VERSION = 7700 , TITLE = 'CFAST Simulation' / !! Scenario Configuration & TIME SIMULATION = 800 PRINT = 60 SMOKEVIEW = 15 SPREADSHEET = 15 / & INIT PRESSURE = 101325 RELATIVE_HUMIDITY = 50 INTERIOR_TEMPERATURE = 20 EXTERIOR_TEMPERATURE = 20 / !! Compartments & COMP ID = 'Comp 1' DEPTH = 6.0960 HEIGHT = 2.4384 WIDTH = 4.5720 ORIGIN = 0 , 0 , 0 GRID = 50 , 50 , 50 / !! Wall Vents & VENT TYPE = 'WALL' ID = 'WallVent_1' COMP_IDS = 'Comp 1' 'OUTSIDE' , BOTTOM = 0 HEIGHT = 2.1336 WIDTH = 0.9144 FACE = 'FRONT' OFFSET = 1.5240 / !! Fires & FIRE ID = 'New Fire 1' COMP_ID = '' , FIRE_ID = 'New Fire 1' LOCATION = 0 , 0 / & CHEM ID = 'New Fire 1' CARBON = 1 CHLORINE = 0 HYDROGEN = 4 NITROGEN = 0 OXYGEN = 0 HEAT_OF_COMBUSTION = 50000 RADIATIVE_FRACTION = 0.35 / & TABL ID = 'New Fire 1' LABELS = 'TIME' , 'HRR' , 'HEIGHT' , 'AREA' , 'CO_YIELD' , 'SOOT_YIELD' , 'HCN_YIELD' , 'HCL_YIELD' , 'TRACE_YIELD' / !! Growth Phase & TABL ID = 'New Fire 1' , DATA = 0 , 0.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 15 , 0.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 30 , 2.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 45 , 5.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 60 , 10.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 75 , 15.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 90 , 22.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 105 , 30.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 120 , 40.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 135 , 50.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 150 , 62.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 165 , 75.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 180 , 90.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 195 , 105.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 210 , 122.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 225 , 140.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 240 , 160.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 255 , 180.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 270 , 202.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 285 , 225.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 300 , 250.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 315 , 275.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 330 , 302.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 345 , 330.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 360 , 360.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 375 , 390.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 390 , 422.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 405 , 455.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 420 , 490.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 435 , 525.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 450 , 562.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 465 , 600.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 480 , 640.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 495 , 680.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 510 , 722.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 525 , 765.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 540 , 810.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 555 , 855.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 570 , 902.5 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 585 , 950.6 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / !! Steady State Phase & TABL ID = 'New Fire 1' , DATA = 600 , 1000.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 800 , 1000.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TABL ID = 'New Fire 1' , DATA = 801 , 0.0 , 0 , 0.001 , 0.01 , 0.01 , 0 , 0 , 0 / & TAIL /","title":"Working with CFAST"},{"location":"topics/multiple_models/","text":"xFDS can generate multiple models from a single pbd.yml configuration file. Each item under the render parameter will be processed. This is useful if when modeling drastically different sections of a building. For example, in modeling a large building such as an airport, the arrival terminal and gate areas may not need to be in the same simulation. Another good use for this is to create small test cases. Three different models are defined in the example below: The primary model used for production A simple mesh resolution study A verification study to ensure the burner is working correctly. Warning xFDS will always render EVERY model listed. Future versions will allow you to select which models to render. Info See the full example to see how the models are used and rendered. examples/multi_model/pbd.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 xfds : render : # Primary model - name : main_model files : - main_model . fds - main_model . pbs variables : hrr : 1000 # kW area : 1.5 # m res : 20 # cm bounds : [ 0 , 20 , 0 , 30 ] # ft floors : [ 0 , 12 , 24 , 36 ] # ft n_proc : 3 # Mesh resolution study local to fire - name : mesh_res_ {{ res }} cm files : - mesh . fds variables : hrr : 1000 # kW area : 1.5 # m bounds : [ - 2 , 2 , - 2 , 2 , 0 , 4 ] parameters : res : [ 10 , 15 , 20 ] # cm # Test to ensure burner is specified correctly - name : simple_burner files : - simple_burner . fds variables : hrr : 1000 # kW area : 1.5 # m","title":"Working with multiple models"},{"location":"topics/pbs/","text":"xFDS can programmatically generate .pbs files! \u00b6 If you need .pbs files , simply add the .pbs file to the files parameter in the config file and build your .pbs file as you would any other template . In the simple atrium example, a variable proc is defined to indicate the number of processors required and is accessable in the template. In Python, // is the operator for floor division. Therefore, {{ proc // <ppn> }} will produce the number of full nodes required. For example, if the model requires 28 nodes and each node has 8 processors, {{ proc // 8 }} will render as 3 implying that 3 full nodes are required. In Python, % is the operator for determining the remainder. Therefore {{ proc % <ppn> }} will produce the number of cores needed on a partial node. For example, if the model requires 28 nodes and each node has 8 processors, {{ proc % 8 }} will render as 4 implying only 4 cores are required on that node. examples/simple_atrium/pbd.yml 1 2 3 4 5 6 7 8 9 xfds : render : - name : atrium_ {{ cfm }} _ {{ mua_perc }} files : - simple_atrium . fds - simple_atrium . pbs variables : proc : 1 ... examples/simple_atrium/simple_atrium.pbs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #PBS -l nodes={{ proc // 12 }}:node1:ppn=12:1:node1:ppn={{ proc % 12 }} #PBS -l nodes+={{ proc // 16 }}:node2:ppn=16:1:node2:ppn={{ proc % 16 }} #PBS -l nodes++={{ proc // 20 }}:node3:ppn=20:1:node3:ppn={{ proc % 20 }} #PBS -N {{ name }} #PBS -S /bin/bash #PBS -m abe #PBS -M xfds@pbd.tools #PBS -j oe # load required modules module load fds / 6.7.5 # change to the working directory cd $ PBS_O_WORKDIR # set MPI variables export I_MPI_PIN = 1 export I_MPI_PIN_MODE = pm export OMP_NUM_THREADS = 1 export MPI_PPN = $ (( $ PBS_NUM_PPN / $ OMP_NUM_THREADS )) export MPI_NP = $ (( $ PBS_NP / $ OMP_NUM_THREADS )) # run fds in parallel mpiexec - np $ MPI_NP fds_mpi {{ name }} . fds Tip Use the xfds.render.parameters.include directive if you need to modify the number of processors based on the a specific configuration. If you require fewer cores than available on a single node, {{ n // 8 }} will render to 0 . Similarly, if the number of required cores is a multiple of the cores on a single node, {{ n % 8 }} will render to 0 . If this is undesireable, use an if statement containing the node filter. The node filter requires two parameters in addition to the number of cores needed: ppn, or how many processors there are per node, and what mode to consider. The modes are as follows: full : Returns True if at least one full node is required. part : Returns True if a partial node is required. both : Returns True if both full and part are required. Tip Use Jinja's whitespace control syntax to collapse multiple lines onto one line. examples/pbs/pbd.yml 1 2 3 4 5 6 7 8 xfds : render : - name : using_ {{ n }} _nodes files : - model . fds - model . pbs parameters : n : [ 4 , 8 , 12 ] examples/pbs/model.pbs 1 2 3 4 #PBS -l nodes= { %- if n | node ( ppn = 8 , mode = 'full' ) % }{{ n // 8 }}: node : ppn = 8 { % endif % } { %- if n | node ( ppn = 8 , mode = 'both' ) % }:{ % endif % } { %- if n | node ( ppn = 8 , mode = 'part' ) % } 1 : node : ppn = {{ n % 8 }}{ % endif % } If only 4 of the 8 processors on a node are needed, only 4 are requested. examples/pbs/output/using_4_nodes/using_4_nodes.pbs 1 #PBS -l nodes=1:node:ppn=4 If all 8 of the 8 processors on a node are needed, all 8 are requested. examples/pbs/output/using_8_nodes/using_8_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8 If 12 processors are needed, but there are only 8 processors on a node, a full node of 8 processors and a partial node of 4 processors are requested. examples/pbs/output/using_12_nodes/using_12_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8:1:node:ppn=4","title":"Generating PBS Files"},{"location":"topics/pbs/#xfds-can-programmatically-generate-pbs-files","text":"If you need .pbs files , simply add the .pbs file to the files parameter in the config file and build your .pbs file as you would any other template . In the simple atrium example, a variable proc is defined to indicate the number of processors required and is accessable in the template. In Python, // is the operator for floor division. Therefore, {{ proc // <ppn> }} will produce the number of full nodes required. For example, if the model requires 28 nodes and each node has 8 processors, {{ proc // 8 }} will render as 3 implying that 3 full nodes are required. In Python, % is the operator for determining the remainder. Therefore {{ proc % <ppn> }} will produce the number of cores needed on a partial node. For example, if the model requires 28 nodes and each node has 8 processors, {{ proc % 8 }} will render as 4 implying only 4 cores are required on that node. examples/simple_atrium/pbd.yml 1 2 3 4 5 6 7 8 9 xfds : render : - name : atrium_ {{ cfm }} _ {{ mua_perc }} files : - simple_atrium . fds - simple_atrium . pbs variables : proc : 1 ... examples/simple_atrium/simple_atrium.pbs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #PBS -l nodes={{ proc // 12 }}:node1:ppn=12:1:node1:ppn={{ proc % 12 }} #PBS -l nodes+={{ proc // 16 }}:node2:ppn=16:1:node2:ppn={{ proc % 16 }} #PBS -l nodes++={{ proc // 20 }}:node3:ppn=20:1:node3:ppn={{ proc % 20 }} #PBS -N {{ name }} #PBS -S /bin/bash #PBS -m abe #PBS -M xfds@pbd.tools #PBS -j oe # load required modules module load fds / 6.7.5 # change to the working directory cd $ PBS_O_WORKDIR # set MPI variables export I_MPI_PIN = 1 export I_MPI_PIN_MODE = pm export OMP_NUM_THREADS = 1 export MPI_PPN = $ (( $ PBS_NUM_PPN / $ OMP_NUM_THREADS )) export MPI_NP = $ (( $ PBS_NP / $ OMP_NUM_THREADS )) # run fds in parallel mpiexec - np $ MPI_NP fds_mpi {{ name }} . fds Tip Use the xfds.render.parameters.include directive if you need to modify the number of processors based on the a specific configuration. If you require fewer cores than available on a single node, {{ n // 8 }} will render to 0 . Similarly, if the number of required cores is a multiple of the cores on a single node, {{ n % 8 }} will render to 0 . If this is undesireable, use an if statement containing the node filter. The node filter requires two parameters in addition to the number of cores needed: ppn, or how many processors there are per node, and what mode to consider. The modes are as follows: full : Returns True if at least one full node is required. part : Returns True if a partial node is required. both : Returns True if both full and part are required. Tip Use Jinja's whitespace control syntax to collapse multiple lines onto one line. examples/pbs/pbd.yml 1 2 3 4 5 6 7 8 xfds : render : - name : using_ {{ n }} _nodes files : - model . fds - model . pbs parameters : n : [ 4 , 8 , 12 ] examples/pbs/model.pbs 1 2 3 4 #PBS -l nodes= { %- if n | node ( ppn = 8 , mode = 'full' ) % }{{ n // 8 }}: node : ppn = 8 { % endif % } { %- if n | node ( ppn = 8 , mode = 'both' ) % }:{ % endif % } { %- if n | node ( ppn = 8 , mode = 'part' ) % } 1 : node : ppn = {{ n % 8 }}{ % endif % } If only 4 of the 8 processors on a node are needed, only 4 are requested. examples/pbs/output/using_4_nodes/using_4_nodes.pbs 1 #PBS -l nodes=1:node:ppn=4 If all 8 of the 8 processors on a node are needed, all 8 are requested. examples/pbs/output/using_8_nodes/using_8_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8 If 12 processors are needed, but there are only 8 processors on a node, a full node of 8 processors and a partial node of 4 processors are requested. examples/pbs/output/using_12_nodes/using_12_nodes.pbs 1 #PBS -l nodes=1:node:ppn=8:1:node:ppn=4","title":"xFDS can programmatically generate .pbs files!"}]}